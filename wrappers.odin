package gl 

import "core:fmt"


when ODIN_DEBUG {
	import "core:runtime"
	debug_helper :: inline proc(from_loc: runtime.Source_Code_Location, num_ret: int, args: ..any, loc := #caller_location) {
		Error_Enum :: enum {
			NO_ERROR = NO_ERROR,
			INVALID_VALUE = INVALID_VALUE,
			INVALID_ENUM = INVALID_ENUM,
			INVALID_OPERATION = INVALID_OPERATION,
			INVALID_FRAMEBUFFER_OPERATION = INVALID_FRAMEBUFFER_OPERATION,
			OUT_OF_MEMORY = OUT_OF_MEMORY,
			STACK_UNDERFLOW = STACK_UNDERFLOW,
			STACK_OVERFLOW = STACK_OVERFLOW,
		}

		for {
			err := cast(Error_Enum)impl_GetError();
			if err == .NO_ERROR do break;

			fmt.printf("glGetError() returned %v\n", err);
		    
			// function call
		    fmt.printf("   call: gl%s(", loc.procedure);
	    	
	    	{
			    // input arguments
			    for arg, i in args[num_ret:] {
			    	if i > 0 do fmt.printf(", ");
			    	
			    	if v, ok := arg.(u32); ok {
			    		if err == .INVALID_ENUM {
			    			fmt.printf("INVALID_ENUM=%d", v);
		    			} else {
			    			fmt.printf("GL_%v=%d", GL_Enum(v), v);
		    			}
			    	} else {
			    		fmt.printf("%v", arg);
			    	}
			    }

			    // return arguments
			    if num_ret == 1 {
			    	fmt.printf(") -> %v \n", args[0]);
				} else if num_ret > 1 {
			    	fmt.printf(") -> (");
					for arg, i in args[1:num_ret] {
						if i > 0 do fmt.printf(", ");
						fmt.printf("%v", arg);
					}
					fmt.printf(")\n");
				} else {
				    fmt.printf(")\n");
				}
	    	}

			// location
		    fmt.printf("   in:   %s(%d:%d)\n", from_loc.file_path, from_loc.line, from_loc.column);
		}
	}

	CullFace               :: inline proc "c" (mode: u32, loc := #caller_location)                                                                                         {        impl_CullFace(mode);                                                                         debug_helper(loc, 0, mode);                                                                                   }
	FrontFace              :: inline proc "c" (mode: u32, loc := #caller_location)                                                                                         {        impl_FrontFace(mode);                                                                        debug_helper(loc, 0, mode);                                                                                   }
	Hint                   :: inline proc "c" (target, mode: u32, loc := #caller_location)                                                                                 {        impl_Hint(target, mode);                                                                     debug_helper(loc, 0, target, mode);                                                                           }
	LineWidth              :: inline proc "c" (width: f32, loc := #caller_location)                                                                                        {        impl_LineWidth(width);                                                                       debug_helper(loc, 0, width);                                                                                  }
	PointSize              :: inline proc "c" (size: f32, loc := #caller_location)                                                                                         {        impl_PointSize(size);                                                                        debug_helper(loc, 0, size);                                                                                   }
	PolygonMode            :: inline proc "c" (face, mode: u32, loc := #caller_location)                                                                                   {        impl_PolygonMode(face, mode);                                                                debug_helper(loc, 0, face, mode);                                                                             }
	Scissor                :: inline proc "c" (x, y, width, height: i32, loc := #caller_location)                                                                          {        impl_Scissor(x, y, width, height);                                                           debug_helper(loc, 0, x, y, width, height);                                                                    }
	TexParameterf          :: inline proc "c" (target, pname: u32, param: f32, loc := #caller_location)                                                                    {        impl_TexParameterf(target, pname, param);                                                    debug_helper(loc, 0, target, pname, param);                                                                   }
	TexParameterfv         :: inline proc "c" (target, pname: u32, params: ^f32, loc := #caller_location)                                                                  {        impl_TexParameterfv(target, pname, params);                                                  debug_helper(loc, 0, target, pname, params);                                                                  }
	TexParameteri          :: inline proc "c" (target, pname: u32, param: i32, loc := #caller_location)                                                                    {        impl_TexParameteri(target, pname, param);                                                    debug_helper(loc, 0, target, pname, param);                                                                   }
	TexParameteriv         :: inline proc "c" (target, pname: u32, params: ^i32, loc := #caller_location)                                                                  {        impl_TexParameteriv(target, pname, params);                                                  debug_helper(loc, 0, target, pname, params);                                                                  }
	TexImage1D             :: inline proc "c" (target: u32, level, internalformat, width, border: i32, format, type: u32, pixels: rawptr, loc := #caller_location)         {        impl_TexImage1D(target, level, internalformat, width, border, format, type, pixels);         debug_helper(loc, 0, target, level, internalformat, width, border, format, type, pixels);                     }
	TexImage2D             :: inline proc "c" (target: u32, level, internalformat, width, height, border: i32, format, type: u32, pixels: rawptr, loc := #caller_location) {        impl_TexImage2D(target, level, internalformat, width, height, border, format, type, pixels); debug_helper(loc, 0, target, level, internalformat, width, height, border, format, type, pixels);             }
	DrawBuffer             :: inline proc "c" (buf: u32, loc := #caller_location)                                                                                          {        impl_DrawBuffer(buf);                                                                        debug_helper(loc, 0, buf);                                                                                    }
	Clear                  :: inline proc "c" (mask: u32, loc := #caller_location)                                                                                         {        impl_Clear(mask);                                                                            debug_helper(loc, 0, mask);                                                                                   }
	ClearColor             :: inline proc "c" (red, green, blue, alpha: f32, loc := #caller_location)                                                                      {        impl_ClearColor(red, green, blue, alpha);                                                    debug_helper(loc, 0, red, green, blue, alpha);                                                                }
	ClearStencil           :: inline proc "c" (s: i32, loc := #caller_location)                                                                                            {        impl_ClearStencil(s);                                                                        debug_helper(loc, 0, s);                                                                                      }
	ClearDepth             :: inline proc "c" (depth: f64, loc := #caller_location)                                                                                        {        impl_ClearDepth(depth);                                                                      debug_helper(loc, 0, depth);                                                                                  }
	StencilMask            :: inline proc "c" (mask: u32, loc := #caller_location)                                                                                         {        impl_StencilMask(mask);                                                                      debug_helper(loc, 0, mask);                                                                                   }
	ColorMask              :: inline proc "c" (red, green, blue, alpha: u8, loc := #caller_location)                                                                       {        impl_ColorMask(red, green, blue, alpha);                                                     debug_helper(loc, 0, red, green, blue, alpha);                                                                }
	DepthMask              :: inline proc "c" (flag: u8, loc := #caller_location)                                                                                          {        impl_DepthMask(flag);                                                                        debug_helper(loc, 0, flag);                                                                                   }
	Disable                :: inline proc "c" (cap: u32, loc := #caller_location)                                                                                          {        impl_Disable(cap);                                                                           debug_helper(loc, 0, cap);                                                                                    }
	Enable                 :: inline proc "c" (cap: u32, loc := #caller_location)                                                                                          {        impl_Enable(cap);                                                                            debug_helper(loc, 0, cap);                                                                                    }
	Finish                 :: inline proc "c" (loc := #caller_location)                                                                                                    {        impl_Finish();                                                                               debug_helper(loc, 0);                                                                                         }
	Flush                  :: inline proc "c" (loc := #caller_location)                                                                                                    {        impl_Flush();                                                                                debug_helper(loc, 0);                                                                                         }
	BlendFunc              :: inline proc "c" (sfactor, dfactor: u32, loc := #caller_location)                                                                             {        impl_BlendFunc(sfactor, dfactor);                                                            debug_helper(loc, 0, sfactor, dfactor);                                                                       }
	LogicOp                :: inline proc "c" (opcode: u32, loc := #caller_location)                                                                                       {        impl_LogicOp(opcode);                                                                        debug_helper(loc, 0, opcode);                                                                                 }
	StencilFunc            :: inline proc "c" (func: u32, ref: i32, mask: u32, loc := #caller_location)                                                                    {        impl_StencilFunc(func, ref, mask);                                                           debug_helper(loc, 0, func, ref, mask);                                                                        }
	StencilOp              :: inline proc "c" (fail, zfail, zpass: u32, loc := #caller_location)                                                                           {        impl_StencilOp(fail, zfail, zpass);                                                          debug_helper(loc, 0, fail, zfail, zpass);                                                                     }
	DepthFunc              :: inline proc "c" (func: u32, loc := #caller_location)                                                                                         {        impl_DepthFunc(func);                                                                        debug_helper(loc, 0, func);                                                                                   }
	PixelStoref            :: inline proc "c" (pname: u32, param: f32, loc := #caller_location)                                                                            {        impl_PixelStoref(pname, param);                                                              debug_helper(loc, 0, pname, param);                                                                           }
	PixelStorei            :: inline proc "c" (pname: u32, param: i32, loc := #caller_location)                                                                            {        impl_PixelStorei(pname, param);                                                              debug_helper(loc, 0, pname, param);                                                                           }
	ReadBuffer             :: inline proc "c" (src: u32, loc := #caller_location)                                                                                          {        impl_ReadBuffer(src);                                                                        debug_helper(loc, 0, src);                                                                                    }
	ReadPixels             :: inline proc "c" (x, y, width, height: i32, format, type: u32, pixels: rawptr, loc := #caller_location)                                       {        impl_ReadPixels(x, y, width, height, format, type, pixels);                                  debug_helper(loc, 0, x, y, width, height, format, type, pixels);                                              }
	GetBooleanv            :: inline proc "c" (pname: u32, data: ^u8, loc := #caller_location)                                                                             {        impl_GetBooleanv(pname, data);                                                               debug_helper(loc, 0, pname, data);                                                                            }
	GetDoublev             :: inline proc "c" (pname: u32, data: ^f64, loc := #caller_location)                                                                            {        impl_GetDoublev(pname, data);                                                                debug_helper(loc, 0, pname, data);                                                                            }
	GetError               :: inline proc "c" (loc := #caller_location) -> u32                                                                                             { ret := impl_GetError();                                                                             debug_helper(loc, 1, ret);                                                                        return ret; }
	GetFloatv              :: inline proc "c" (pname: u32, data: ^f32, loc := #caller_location)                                                                            {        impl_GetFloatv(pname, data);                                                                 debug_helper(loc, 0, pname, data);                                                                            }
	GetIntegerv            :: inline proc "c" (pname: u32, data: ^i32, loc := #caller_location)                                                                            {        impl_GetIntegerv(pname, data);                                                               debug_helper(loc, 0, pname, data);                                                                            }
	GetString              :: inline proc "c" (name: u32, loc := #caller_location) -> cstring                                                                              { ret := impl_GetString(name);                                                                        debug_helper(loc, 1, ret, name);                                                                  return ret; }
	GetTexImage            :: inline proc "c" (target: u32,  level: i32, format, type: u32, pixels: rawptr, loc := #caller_location)                                       {        impl_GetTexImage(target,  level, format, type, pixels);                                      debug_helper(loc, 0, target,  level, format, type, pixels);                                                   }
	GetTexParameterfv      :: inline proc "c" (target, pname: u32, params: ^f32, loc := #caller_location)                                                                  {        impl_GetTexParameterfv(target, pname, params);                                               debug_helper(loc, 0, target, pname, params);                                                                  }
	GetTexParameteriv      :: inline proc "c" (target, pname: u32, params: ^i32, loc := #caller_location)                                                                  {        impl_GetTexParameteriv(target, pname, params);                                               debug_helper(loc, 0, target, pname, params);                                                                  }
	GetTexLevelParameterfv :: inline proc "c" (target: u32, level: i32, pname: u32, params: ^f32, loc := #caller_location)                                                 {        impl_GetTexLevelParameterfv(target, level, pname, params);                                   debug_helper(loc, 0, target, level, pname, params);                                                           }
	GetTexLevelParameteriv :: inline proc "c" (target: u32, level: i32, pname: u32, params: ^i32, loc := #caller_location)                                                 {        impl_GetTexLevelParameteriv(target, level, pname, params);                                   debug_helper(loc, 0, target, level, pname, params);                                                           }
	IsEnabled              :: inline proc "c" (cap: u32, loc := #caller_location) -> u8                                                                                    { ret := impl_IsEnabled(cap);                                                                         debug_helper(loc, 1, ret, cap);                                                                   return ret; }
	DepthRange             :: inline proc "c" (near, far: f64, loc := #caller_location)                                                                                    {        impl_DepthRange(near, far);                                                                  debug_helper(loc, 0, near, far);                                                                              }
	Viewport               :: inline proc "c" (x, y, width, height: i32, loc := #caller_location)                                                                          {        impl_Viewport(x, y, width, height);                                                          debug_helper(loc, 0, x, y, width, height);                                                                    }

	// VERSION_1_1
	DrawArrays        :: inline proc "c" (mode: u32, first: i32, count: i32, loc := #caller_location)                                                                                    {        impl_DrawArrays(mode, first, count);                                                      debug_helper(loc, 0, mode, first, count);                                                               }
	DrawElements      :: inline proc "c" (mode: u32, count: i32, type: u32, indices: rawptr, loc := #caller_location)                                                                    {        impl_DrawElements(mode, count, type, indices);                                            debug_helper(loc, 0, mode, count, type, indices);                                                       }
	PolygonOffset     :: inline proc "c" (factor: f32, units: f32, loc := #caller_location)                                                                                              {        impl_PolygonOffset(factor, units);                                                        debug_helper(loc, 0, factor, units);                                                                    }
	CopyTexImage1D    :: inline proc "c" (target: u32, level: i32, internalformat: u32, x: i32, y: i32, width: i32, border: i32, loc := #caller_location)                                {        impl_CopyTexImage1D(target, level, internalformat, x, y, width, border);                  debug_helper(loc, 0, target, level, internalformat, x, y, width, border);                               }
	CopyTexImage2D    :: inline proc "c" (target: u32, level: i32, internalformat: u32, x: i32, y: i32, width: i32, height: i32, border: i32, loc := #caller_location)                   {        impl_CopyTexImage2D(target, level, internalformat, x, y, width, height, border);          debug_helper(loc, 0, target, level, internalformat, x, y, width, height, border);                       }
	CopyTexSubImage1D :: inline proc "c" (target: u32, level: i32, xoffset: i32, x: i32, y: i32, width: i32, loc := #caller_location)                                                    {        impl_CopyTexSubImage1D(target, level, xoffset, x, y, width);                              debug_helper(loc, 0, target, level, xoffset, x, y, width);                                              }
	CopyTexSubImage2D :: inline proc "c" (target: u32, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32, loc := #caller_location)                         {        impl_CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);             debug_helper(loc, 0, target, level, xoffset, yoffset, x, y, width, height);                             }
	TexSubImage1D     :: inline proc "c" (target: u32, level: i32, xoffset: i32, width: i32, format: u32, type: u32, pixels: rawptr, loc := #caller_location)                            {        impl_TexSubImage1D(target, level, xoffset, width, format, type, pixels);                  debug_helper(loc, 0, target, level, xoffset, width, format, type, pixels);                              }
	TexSubImage2D     :: inline proc "c" (target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, type: u32, pixels: rawptr, loc := #caller_location) {        impl_TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); debug_helper(loc, 0, target, level, xoffset, yoffset, width, height, format, type, pixels);             }
	BindTexture       :: inline proc "c" (target: u32, texture: u32, loc := #caller_location)                                                                                            {        impl_BindTexture(target, texture);                                                        debug_helper(loc, 0, target, texture);                                                                  }
	DeleteTextures    :: inline proc "c" (n: i32, textures: ^u32, loc := #caller_location)                                                                                               {        impl_DeleteTextures(n, textures);                                                         debug_helper(loc, 0, n, textures);                                                                      }
	GenTextures       :: inline proc "c" (n: i32, textures: ^u32, loc := #caller_location)                                                                                               {        impl_GenTextures(n, textures);                                                            debug_helper(loc, 0, n, textures);                                                                      }
	IsTexture         :: inline proc "c" (texture: u32, loc := #caller_location) -> u8                                                                                                   { ret := impl_IsTexture(texture);                                                                  debug_helper(loc, 1, ret, texture);                                                         return ret; }

	// VERSION_1_2
	DrawRangeElements :: inline proc "c" (mode, start, end: u32, count: i32, type: u32, indices: rawptr, loc := #caller_location)                                               { impl_DrawRangeElements(mode, start, end, count, type, indices);                                           debug_helper(loc, 0, mode, start, end, count, type, indices);                                               }
	TexImage3D        :: inline proc "c" (target: u32, level, internalformat, width, height, depth, border: i32, format, type: u32, pixels: rawptr, loc := #caller_location)    { impl_TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);       debug_helper(loc, 0, target, level, internalformat, width, height, depth, border, format, type, pixels);    }
	TexSubImage3D     :: inline proc "c" (target: u32, level, xoffset, yoffset, zoffset, width, height, depth: i32, format, type: u32, pixels: rawptr, loc := #caller_location) { impl_TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); debug_helper(loc, 0, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
	CopyTexSubImage3D :: inline proc "c" (target: u32, level, xoffset, yoffset, zoffset, x, y, width, height: i32, loc := #caller_location)                                     { impl_CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);                    debug_helper(loc, 0, target, level, xoffset, yoffset, zoffset, x, y, width, height);                        }

	// VERSION_1_3
	ActiveTexture           :: inline proc "c" (texture: u32, loc := #caller_location)                                                                                                                                      { impl_ActiveTexture(texture);                                                                                           debug_helper(loc, 0, texture);                                                                                 }
	SampleCoverage          :: inline proc "c" (value: f32, invert: u8, loc := #caller_location)                                                                                                                            { impl_SampleCoverage(value, invert);                                                                                    debug_helper(loc, 0, value, invert);                                                                           }
	CompressedTexImage3D    :: inline proc "c" (target: u32, level: i32, internalformat: u32, width: i32, height: i32, depth: i32, border: i32, imageSize: i32, data: rawptr, loc := #caller_location)                      { impl_CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);               debug_helper(loc, 0, target, level, internalformat, width, height, depth, border, imageSize, data);            }
	CompressedTexImage2D    :: inline proc "c" (target: u32, level: i32, internalformat: u32, width: i32, height: i32, border: i32, imageSize: i32, data: rawptr, loc := #caller_location)                                  { impl_CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);                      debug_helper(loc, 0, target, level, internalformat, width, height, border, imageSize, data);                   }
	CompressedTexImage1D    :: inline proc "c" (target: u32, level: i32, internalformat: u32, width: i32, border: i32, imageSize: i32, data: rawptr, loc := #caller_location)                                               { impl_CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);                              debug_helper(loc, 0, target, level, internalformat, width, border, imageSize, data);                           }
	CompressedTexSubImage3D :: inline proc "c" (target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, imageSize: i32, data: rawptr, loc := #caller_location) { impl_CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); debug_helper(loc, 0, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
	CompressedTexSubImage2D :: inline proc "c" (target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, imageSize: i32, data: rawptr, loc := #caller_location)                           { impl_CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);                 debug_helper(loc, 0, target, level, xoffset, yoffset, width, height, format, imageSize, data);                 }
	CompressedTexSubImage1D :: inline proc "c" (target: u32, level: i32, xoffset: i32, width: i32, format: u32, imageSize: i32, data: rawptr, loc := #caller_location)                                                      { impl_CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);                                  debug_helper(loc, 0, target, level, xoffset, width, format, imageSize, data);                                  }
	GetCompressedTexImage   :: inline proc "c" (target: u32, level: i32, img: rawptr, loc := #caller_location)                                                                                                              { impl_GetCompressedTexImage(target, level, img);                                                                        debug_helper(loc, 0, target, level, img);                                                                      }

	// VERSION_1_4
    BlendFuncSeparate :: inline proc "c" (sfactorRGB: u32, dfactorRGB: u32, sfactorAlpha: u32, dfactorAlpha: u32, loc := #caller_location) { impl_BlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); debug_helper(loc, 0, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
    MultiDrawArrays   :: inline proc "c" (mode: u32, first: ^i32, count: ^i32, drawcount: i32, loc := #caller_location)                    { impl_MultiDrawArrays(mode, first, count, drawcount);                        debug_helper(loc, 0, mode, first, count, drawcount);                      }
    MultiDrawElements :: inline proc "c" (mode: u32, count: ^i32, type_: u32, indices: ^rawptr, drawcount: i32, loc := #caller_location)   { impl_MultiDrawElements(mode, count, type_, indices, drawcount);             debug_helper(loc, 0, mode, count, type_, indices, drawcount);             }
    PointParameterf   :: inline proc "c" (pname: u32, param: f32, loc := #caller_location)                                                 { impl_PointParameterf(pname, param);                                         debug_helper(loc, 0, pname, param);                                       }
    PointParameterfv  :: inline proc "c" (pname: u32, params: ^f32, loc := #caller_location)                                               { impl_PointParameterfv(pname, params);                                       debug_helper(loc, 0, pname, params);                                      }
    PointParameteri   :: inline proc "c" (pname: u32, param: i32, loc := #caller_location)                                                 { impl_PointParameteri(pname, param);                                         debug_helper(loc, 0, pname, param);                                       }
    PointParameteriv  :: inline proc "c" (pname: u32, params: ^i32, loc := #caller_location)                                               { impl_PointParameteriv(pname, params);                                       debug_helper(loc, 0, pname, params);                                      }
    BlendColor        :: inline proc "c" (red: f32, green: f32, blue: f32, alpha: f32, loc := #caller_location)                            { impl_BlendColor(red, green, blue, alpha);                                   debug_helper(loc, 0, red, green, blue, alpha);                            }
    BlendEquation     :: inline proc "c" (mode: u32, loc := #caller_location)                                                              { impl_BlendEquation(mode);                                                   debug_helper(loc, 0, mode);                                               }

    // VERSION_1_5
	GenQueries           :: inline proc "c" (n: i32, ids: ^u32, loc := #caller_location)                                 {        impl_GenQueries(n, ids);                           debug_helper(loc, 0, n, ids);                                 }
	DeleteQueries        :: inline proc "c" (n: i32, ids: ^u32, loc := #caller_location)                                 {        impl_DeleteQueries(n, ids);                        debug_helper(loc, 0, n, ids);                                 }
	IsQuery              :: inline proc "c" (id: u32, loc := #caller_location) -> u8                                     { ret := impl_IsQuery(id);                                  debug_helper(loc, 1, ret, id);                    return ret; }
	BeginQuery           :: inline proc "c" (target: u32, id: u32, loc := #caller_location)                              {        impl_BeginQuery(target, id);                       debug_helper(loc, 0, target, id);                             }
	EndQuery             :: inline proc "c" (target: u32, loc := #caller_location)                                       {        impl_EndQuery(target);                             debug_helper(loc, 0, target);                                 }
	GetQueryiv           :: inline proc "c" (target: u32, pname: u32, params: ^i32, loc := #caller_location)             {        impl_GetQueryiv(target, pname, params);            debug_helper(loc, 0, target, pname, params);                  }
	GetQueryObjectiv     :: inline proc "c" (id: u32, pname: u32, params: ^i32, loc := #caller_location)                 {        impl_GetQueryObjectiv(id, pname, params);          debug_helper(loc, 0, id, pname, params);                      }
	GetQueryObjectuiv    :: inline proc "c" (id: u32, pname: u32, params: ^u32, loc := #caller_location)                 {        impl_GetQueryObjectuiv(id, pname, params);         debug_helper(loc, 0, id, pname, params);                      }
	BindBuffer           :: inline proc "c" (target: u32, buffer: u32, loc := #caller_location)                          {        impl_BindBuffer(target, buffer);                   debug_helper(loc, 0, target, buffer);                         }
	DeleteBuffers        :: inline proc "c" (n: i32, buffers: ^u32, loc := #caller_location)                             {        impl_DeleteBuffers(n, buffers);                    debug_helper(loc, 0, n, buffers);                             }
	GenBuffers           :: inline proc "c" (n: i32, buffers: ^u32, loc := #caller_location)                             {        impl_GenBuffers(n, buffers);                       debug_helper(loc, 0, n, buffers);                             }
	IsBuffer             :: inline proc "c" (buffer: u32, loc := #caller_location) -> u8                                 { ret := impl_IsBuffer(buffer);                             debug_helper(loc, 1, ret, buffer);                return ret; }
	BufferData           :: inline proc "c" (target: u32, size: int, data: rawptr, usage: u32, loc := #caller_location)  {        impl_BufferData(target, size, data, usage);        debug_helper(loc, 0, target, size, data, usage);              }
	BufferSubData        :: inline proc "c" (target: u32, offset: int, size: int, data: rawptr, loc := #caller_location) {        impl_BufferSubData(target, offset, size, data);    debug_helper(loc, 0, target, offset, size, data);             }
	GetBufferSubData     :: inline proc "c" (target: u32, offset: int, size: int, data: rawptr, loc := #caller_location) {        impl_GetBufferSubData(target, offset, size, data); debug_helper(loc, 0, target, offset, size, data);             }
	MapBuffer            :: inline proc "c" (target: u32, access: u32, loc := #caller_location) -> rawptr                { ret := impl_MapBuffer(target, access);                    debug_helper(loc, 1, ret, target, access);        return ret; }
	UnmapBuffer          :: inline proc "c" (target: u32, loc := #caller_location) -> u8                                 { ret := impl_UnmapBuffer(target);                          debug_helper(loc, 1, ret, target);                return ret; }
	GetBufferParameteriv :: inline proc "c" (target: u32, pname: u32, params: ^i32, loc := #caller_location)             {        impl_GetBufferParameteriv(target, pname, params);  debug_helper(loc, 0, target, pname, params);                  }
	GetBufferPointerv    :: inline proc "c" (target: u32, pname: u32, params: ^rawptr, loc := #caller_location)          {        impl_GetBufferPointerv(target, pname, params);     debug_helper(loc, 0, target, pname, params);                  }

	// VERSION_2_0
	BlendEquationSeparate    :: inline proc "c" (modeRGB: u32, modeAlpha: u32, loc := #caller_location)                                                             {        impl_BlendEquationSeparate(modeRGB, modeAlpha);                            debug_helper(loc, 0, modeRGB, modeAlpha);                                             }
	DrawBuffers              :: inline proc "c" (n: i32, bufs: ^u32, loc := #caller_location)                                                                       {        impl_DrawBuffers(n, bufs);                                                 debug_helper(loc, 0, n, bufs);                                                        }
	StencilOpSeparate        :: inline proc "c" (face: u32, sfail: u32, dpfail: u32, dppass: u32, loc := #caller_location)                                          {        impl_StencilOpSeparate(face, sfail, dpfail, dppass);                       debug_helper(loc, 0, face, sfail, dpfail, dppass);                                    }
	StencilFuncSeparate      :: inline proc "c" (face: u32, func: u32, ref: i32, mask: u32, loc := #caller_location)                                                {        impl_StencilFuncSeparate(face, func, ref, mask);                           debug_helper(loc, 0, face, func, ref, mask);                                          }
	StencilMaskSeparate      :: inline proc "c" (face: u32, mask: u32, loc := #caller_location)                                                                     {        impl_StencilMaskSeparate(face, mask);                                      debug_helper(loc, 0, face, mask);                                                     }
	AttachShader             :: inline proc "c" (program: u32, shader: u32, loc := #caller_location)                                                                {        impl_AttachShader(program, shader);                                        debug_helper(loc, 0, program, shader);                                                }
	BindAttribLocation       :: inline proc "c" (program: u32, index: u32, name: ^u8, loc := #caller_location)                                                      {        impl_BindAttribLocation(program, index, name);                             debug_helper(loc, 0, program, index, name);                                           }
	CompileShader            :: inline proc "c" (shader: u32, loc := #caller_location)                                                                              {        impl_CompileShader(shader);                                                debug_helper(loc, 0, shader);                                                         }
	CreateProgram            :: inline proc "c" (loc := #caller_location) -> u32                                                                                    { ret := impl_CreateProgram();                                                      debug_helper(loc, 1, ret);                                                return ret; }
	CreateShader             :: inline proc "c" (type_: u32, loc := #caller_location) -> u32                                                                        { ret := impl_CreateShader(type_);                                                  debug_helper(loc, 1, ret, type_);                                         return ret; }
	DeleteProgram            :: inline proc "c" (program: u32, loc := #caller_location)                                                                             {        impl_DeleteProgram(program);                                               debug_helper(loc, 0, program);                                                        }
	DeleteShader             :: inline proc "c" (shader: u32, loc := #caller_location)                                                                              {        impl_DeleteShader(shader);                                                 debug_helper(loc, 0, shader);                                                         }
	DetachShader             :: inline proc "c" (program: u32, shader: u32, loc := #caller_location)                                                                {        impl_DetachShader(program, shader);                                        debug_helper(loc, 0, program, shader);                                                }
	DisableVertexAttribArray :: inline proc "c" (index: u32, loc := #caller_location)                                                                               {        impl_DisableVertexAttribArray(index);                                      debug_helper(loc, 0, index);                                                          }
	EnableVertexAttribArray  :: inline proc "c" (index: u32, loc := #caller_location)                                                                               {        impl_EnableVertexAttribArray(index);                                       debug_helper(loc, 0, index);                                                          }
	GetActiveAttrib          :: inline proc "c" (program: u32, index: u32, bufSize: i32, length: ^i32, size: ^i32, type_: ^u32, name: ^u8, loc := #caller_location) {        impl_GetActiveAttrib(program, index, bufSize, length, size, type_, name);  debug_helper(loc, 0, program, index, bufSize, length, size, type_, name);             }
	GetActiveUniform         :: inline proc "c" (program: u32, index: u32, bufSize: i32, length: ^i32, size: ^i32, type_: ^u32, name: ^u8, loc := #caller_location) {        impl_GetActiveUniform(program, index, bufSize, length, size, type_, name); debug_helper(loc, 0, program, index, bufSize, length, size, type_, name);             }
	GetAttachedShaders       :: inline proc "c" (program: u32, maxCount: i32, count: ^i32, shaders: ^u32, loc := #caller_location)                                  {        impl_GetAttachedShaders(program, maxCount, count, shaders);                debug_helper(loc, 0, program, maxCount, count, shaders);                              }
	GetAttribLocation        :: inline proc "c" (program: u32, name: cstring, loc := #caller_location) -> i32                                                       { ret := impl_GetAttribLocation(program, name);                                     debug_helper(loc, 1, ret, program, name);                                 return ret; }
	GetProgramiv             :: inline proc "c" (program: u32, pname: u32, params: ^i32, loc := #caller_location)                                                   {        impl_GetProgramiv(program, pname, params);                                 debug_helper(loc, 0, program, pname, params);                                         }
	GetProgramInfoLog        :: inline proc "c" (program: u32, bufSize: i32, length: ^i32, infoLog: ^u8, loc := #caller_location)                                   {        impl_GetProgramInfoLog(program, bufSize, length, infoLog);                 debug_helper(loc, 0, program, bufSize, length, infoLog);                              }
	GetShaderiv              :: inline proc "c" (shader: u32, pname: u32, params: ^i32, loc := #caller_location)                                                    {        impl_GetShaderiv(shader, pname, params);                                   debug_helper(loc, 0, shader, pname, params);                                          }
	GetShaderInfoLog         :: inline proc "c" (shader: u32, bufSize: i32, length: ^i32, infoLog: ^u8, loc := #caller_location)                                    {        impl_GetShaderInfoLog(shader, bufSize, length, infoLog);                   debug_helper(loc, 0, shader, bufSize, length, infoLog);                               }
	GetShaderSource          :: inline proc "c" (shader: u32, bufSize: i32, length: ^i32, source: ^u8, loc := #caller_location)                                     {        impl_GetShaderSource(shader, bufSize, length, source);                     debug_helper(loc, 0, shader, bufSize, length, source);                                }
	GetUniformLocation       :: inline proc "c" (program: u32, name: cstring, loc := #caller_location) -> i32                                                       { ret := impl_GetUniformLocation(program, name);                                    debug_helper(loc, 1, ret, program, name);                                 return ret; }
	GetUniformfv             :: inline proc "c" (program: u32, location: i32, params: ^f32, loc := #caller_location)                                                {        impl_GetUniformfv(program, location, params);                              debug_helper(loc, 0, program, location, params);                                      }
	GetUniformiv             :: inline proc "c" (program: u32, location: i32, params: ^i32, loc := #caller_location)                                                {        impl_GetUniformiv(program, location, params);                              debug_helper(loc, 0, program, location, params);                                      }
	GetVertexAttribdv        :: inline proc "c" (index: u32, pname: u32, params: ^f64, loc := #caller_location)                                                     {        impl_GetVertexAttribdv(index, pname, params);                              debug_helper(loc, 0, index, pname, params);                                           }
	GetVertexAttribfv        :: inline proc "c" (index: u32, pname: u32, params: ^f32, loc := #caller_location)                                                     {        impl_GetVertexAttribfv(index, pname, params);                              debug_helper(loc, 0, index, pname, params);                                           }
	GetVertexAttribiv        :: inline proc "c" (index: u32, pname: u32, params: ^i32, loc := #caller_location)                                                     {        impl_GetVertexAttribiv(index, pname, params);                              debug_helper(loc, 0, index, pname, params);                                           }
	GetVertexAttribPointerv  :: inline proc "c" (index: u32, pname: u32, pointer: ^rawptr, loc := #caller_location)                                                 {        impl_GetVertexAttribPointerv(index, pname, pointer);                       debug_helper(loc, 0, index, pname, pointer);                                          }
	IsProgram                :: inline proc "c" (program: u32, loc := #caller_location) -> u8                                                                       { ret := impl_IsProgram(program);                                                   debug_helper(loc, 1, ret, program);                                       return ret; }
	IsShader                 :: inline proc "c" (shader: u32, loc := #caller_location) -> u8                                                                        { ret := impl_IsShader(shader);                                                     debug_helper(loc, 1, ret, shader);                                        return ret; }
	LinkProgram              :: inline proc "c" (program: u32, loc := #caller_location)                                                                             {        impl_LinkProgram(program);                                                 debug_helper(loc, 0, program);                                                        }
	ShaderSource             :: inline proc "c" (shader: u32, count: i32, string: ^^u8, length: ^i32, loc := #caller_location)                                      {        impl_ShaderSource(shader, count, string, length);                          debug_helper(loc, 0, shader, count, string, length);                                  }
	UseProgram               :: inline proc "c" (program: u32, loc := #caller_location)                                                                             {        impl_UseProgram(program);                                                  debug_helper(loc, 0, program);                                                        }
	Uniform1f                :: inline proc "c" (location: i32, v0: f32, loc := #caller_location)                                                                   {        impl_Uniform1f(location, v0);                                              debug_helper(loc, 0, location, v0);                                                   }
	Uniform2f                :: inline proc "c" (location: i32, v0: f32, v1: f32, loc := #caller_location)                                                          {        impl_Uniform2f(location, v0, v1);                                          debug_helper(loc, 0, location, v0, v1);                                               }
	Uniform3f                :: inline proc "c" (location: i32, v0: f32, v1: f32, v2: f32, loc := #caller_location)                                                 {        impl_Uniform3f(location, v0, v1, v2);                                      debug_helper(loc, 0, location, v0, v1, v2);                                           }
	Uniform4f                :: inline proc "c" (location: i32, v0: f32, v1: f32, v2: f32, v3: f32, loc := #caller_location)                                        {        impl_Uniform4f(location, v0, v1, v2, v3);                                  debug_helper(loc, 0, location, v0, v1, v2, v3);                                       }
	Uniform1i                :: inline proc "c" (location: i32, v0: i32, loc := #caller_location)                                                                   {        impl_Uniform1i(location, v0);                                              debug_helper(loc, 0, location, v0);                                                   }
	Uniform2i                :: inline proc "c" (location: i32, v0: i32, v1: i32, loc := #caller_location)                                                          {        impl_Uniform2i(location, v0, v1);                                          debug_helper(loc, 0, location, v0, v1);                                               }
	Uniform3i                :: inline proc "c" (location: i32, v0: i32, v1: i32, v2: i32, loc := #caller_location)                                                 {        impl_Uniform3i(location, v0, v1, v2);                                      debug_helper(loc, 0, location, v0, v1, v2);                                           }
	Uniform4i                :: inline proc "c" (location: i32, v0: i32, v1: i32, v2: i32, v3: i32, loc := #caller_location)                                        {        impl_Uniform4i(location, v0, v1, v2, v3);                                  debug_helper(loc, 0, location, v0, v1, v2, v3);                                       }
	Uniform1fv               :: inline proc "c" (location: i32, count: i32, value: ^f32, loc := #caller_location)                                                   {        impl_Uniform1fv(location, count, value);                                   debug_helper(loc, 0, location, count, value);                                         }
	Uniform2fv               :: inline proc "c" (location: i32, count: i32, value: ^f32, loc := #caller_location)                                                   {        impl_Uniform2fv(location, count, value);                                   debug_helper(loc, 0, location, count, value);                                         }
	Uniform3fv               :: inline proc "c" (location: i32, count: i32, value: ^f32, loc := #caller_location)                                                   {        impl_Uniform3fv(location, count, value);                                   debug_helper(loc, 0, location, count, value);                                         }
	Uniform4fv               :: inline proc "c" (location: i32, count: i32, value: ^f32, loc := #caller_location)                                                   {        impl_Uniform4fv(location, count, value);                                   debug_helper(loc, 0, location, count, value);                                         }
	Uniform1iv               :: inline proc "c" (location: i32, count: i32, value: ^i32, loc := #caller_location)                                                   {        impl_Uniform1iv(location, count, value);                                   debug_helper(loc, 0, location, count, value);                                         }
	Uniform2iv               :: inline proc "c" (location: i32, count: i32, value: ^i32, loc := #caller_location)                                                   {        impl_Uniform2iv(location, count, value);                                   debug_helper(loc, 0, location, count, value);                                         }
	Uniform3iv               :: inline proc "c" (location: i32, count: i32, value: ^i32, loc := #caller_location)                                                   {        impl_Uniform3iv(location, count, value);                                   debug_helper(loc, 0, location, count, value);                                         }
	Uniform4iv               :: inline proc "c" (location: i32, count: i32, value: ^i32, loc := #caller_location)                                                   {        impl_Uniform4iv(location, count, value);                                   debug_helper(loc, 0, location, count, value);                                         }
	UniformMatrix2fv         :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32, loc := #caller_location)                                    {        impl_UniformMatrix2fv(location, count, transpose, value);                  debug_helper(loc, 0, location, count, transpose, value);                              }
	UniformMatrix3fv         :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32, loc := #caller_location)                                    {        impl_UniformMatrix3fv(location, count, transpose, value);                  debug_helper(loc, 0, location, count, transpose, value);                              }
	UniformMatrix4fv         :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32, loc := #caller_location)                                    {        impl_UniformMatrix4fv(location, count, transpose, value);                  debug_helper(loc, 0, location, count, transpose, value);                              }
	ValidateProgram          :: inline proc "c" (program: u32, loc := #caller_location)                                                                             {        impl_ValidateProgram(program);                                             debug_helper(loc, 0, program);                                                        }
	VertexAttrib1d           :: inline proc "c" (index: u32, x: f64, loc := #caller_location)                                                                       {        impl_VertexAttrib1d(index, x);                                             debug_helper(loc, 0, index, x);                                                       }
	VertexAttrib1dv          :: inline proc "c" (index: u32, v: ^f64, loc := #caller_location)                                                                      {        impl_VertexAttrib1dv(index, v);                                            debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib1f           :: inline proc "c" (index: u32, x: f32, loc := #caller_location)                                                                       {        impl_VertexAttrib1f(index, x);                                             debug_helper(loc, 0, index, x);                                                       }
	VertexAttrib1fv          :: inline proc "c" (index: u32, v: ^f32, loc := #caller_location)                                                                      {        impl_VertexAttrib1fv(index, v);                                            debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib1s           :: inline proc "c" (index: u32, x: i16, loc := #caller_location)                                                                       {        impl_VertexAttrib1s(index, x);                                             debug_helper(loc, 0, index, x);                                                       }
	VertexAttrib1sv          :: inline proc "c" (index: u32, v: ^i16, loc := #caller_location)                                                                      {        impl_VertexAttrib1sv(index, v);                                            debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib2d           :: inline proc "c" (index: u32, x: f64, y: f64, loc := #caller_location)                                                               {        impl_VertexAttrib2d(index, x, y);                                          debug_helper(loc, 0, index, x, y);                                                    }
	VertexAttrib2dv          :: inline proc "c" (index: u32, v: ^f64, loc := #caller_location)                                                                      {        impl_VertexAttrib2dv(index, v);                                            debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib2f           :: inline proc "c" (index: u32, x: f32, y: f32, loc := #caller_location)                                                               {        impl_VertexAttrib2f(index, x, y);                                          debug_helper(loc, 0, index, x, y);                                                    }
	VertexAttrib2fv          :: inline proc "c" (index: u32, v: ^f32, loc := #caller_location)                                                                      {        impl_VertexAttrib2fv(index, v);                                            debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib2s           :: inline proc "c" (index: u32, x: i16, y: i16, loc := #caller_location)                                                               {        impl_VertexAttrib2s(index, x, y);                                          debug_helper(loc, 0, index, x, y);                                                    }
	VertexAttrib2sv          :: inline proc "c" (index: u32, v: ^i16, loc := #caller_location)                                                                      {        impl_VertexAttrib2sv(index, v);                                            debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib3d           :: inline proc "c" (index: u32, x: f64, y: f64, z: f64, loc := #caller_location)                                                       {        impl_VertexAttrib3d(index, x, y, z);                                       debug_helper(loc, 0, index, x, y, z);                                                 }
	VertexAttrib3dv          :: inline proc "c" (index: u32, v: ^f64, loc := #caller_location)                                                                      {        impl_VertexAttrib3dv(index, v);                                            debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib3f           :: inline proc "c" (index: u32, x: f32, y: f32, z: f32, loc := #caller_location)                                                       {        impl_VertexAttrib3f(index, x, y, z);                                       debug_helper(loc, 0, index, x, y, z);                                                 }
	VertexAttrib3fv          :: inline proc "c" (index: u32, v: ^f32, loc := #caller_location)                                                                      {        impl_VertexAttrib3fv(index, v);                                            debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib3s           :: inline proc "c" (index: u32, x: i16, y: i16, z: i16, loc := #caller_location)                                                       {        impl_VertexAttrib3s(index, x, y, z);                                       debug_helper(loc, 0, index, x, y, z);                                                 }
	VertexAttrib3sv          :: inline proc "c" (index: u32, v: ^i16, loc := #caller_location)                                                                      {        impl_VertexAttrib3sv(index, v);                                            debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib4Nbv         :: inline proc "c" (index: u32, v: ^i8, loc := #caller_location)                                                                       {        impl_VertexAttrib4Nbv(index, v);                                           debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib4Niv         :: inline proc "c" (index: u32, v: ^i32, loc := #caller_location)                                                                      {        impl_VertexAttrib4Niv(index, v);                                           debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib4Nsv         :: inline proc "c" (index: u32, v: ^i16, loc := #caller_location)                                                                      {        impl_VertexAttrib4Nsv(index, v);                                           debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib4Nub         :: inline proc "c" (index: u32, x: u8, y: u8, z: u8, w: u8, loc := #caller_location)                                                   {        impl_VertexAttrib4Nub(index, x, y, z, w);                                  debug_helper(loc, 0, index, x, y, z, w);                                              }
	VertexAttrib4Nubv        :: inline proc "c" (index: u32, v: ^u8, loc := #caller_location)                                                                       {        impl_VertexAttrib4Nubv(index, v);                                          debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib4Nuiv        :: inline proc "c" (index: u32, v: ^u32, loc := #caller_location)                                                                      {        impl_VertexAttrib4Nuiv(index, v);                                          debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib4Nusv        :: inline proc "c" (index: u32, v: ^u16, loc := #caller_location)                                                                      {        impl_VertexAttrib4Nusv(index, v);                                          debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib4bv          :: inline proc "c" (index: u32, v: ^i8, loc := #caller_location)                                                                       {        impl_VertexAttrib4bv(index, v);                                            debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib4d           :: inline proc "c" (index: u32, x: f64, y: f64, z: f64, w: f64, loc := #caller_location)                                               {        impl_VertexAttrib4d(index, x, y, z, w);                                    debug_helper(loc, 0, index, x, y, z, w);                                              }
	VertexAttrib4dv          :: inline proc "c" (index: u32, v: ^f64, loc := #caller_location)                                                                      {        impl_VertexAttrib4dv(index, v);                                            debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib4f           :: inline proc "c" (index: u32, x: f32, y: f32, z: f32, w: f32, loc := #caller_location)                                               {        impl_VertexAttrib4f(index, x, y, z, w);                                    debug_helper(loc, 0, index, x, y, z, w);                                              }
	VertexAttrib4fv          :: inline proc "c" (index: u32, v: ^f32, loc := #caller_location)                                                                      {        impl_VertexAttrib4fv(index, v);                                            debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib4iv          :: inline proc "c" (index: u32, v: ^i32, loc := #caller_location)                                                                      {        impl_VertexAttrib4iv(index, v);                                            debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib4s           :: inline proc "c" (index: u32, x: i16, y: i16, z: i16, w: i16, loc := #caller_location)                                               {        impl_VertexAttrib4s(index, x, y, z, w);                                    debug_helper(loc, 0, index, x, y, z, w);                                              }
	VertexAttrib4sv          :: inline proc "c" (index: u32, v: ^i16, loc := #caller_location)                                                                      {        impl_VertexAttrib4sv(index, v);                                            debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib4ubv         :: inline proc "c" (index: u32, v: ^u8, loc := #caller_location)                                                                       {        impl_VertexAttrib4ubv(index, v);                                           debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib4uiv         :: inline proc "c" (index: u32, v: ^u32, loc := #caller_location)                                                                      {        impl_VertexAttrib4uiv(index, v);                                           debug_helper(loc, 0, index, v);                                                       }
	VertexAttrib4usv         :: inline proc "c" (index: u32, v: ^u16, loc := #caller_location)                                                                      {        impl_VertexAttrib4usv(index, v);                                           debug_helper(loc, 0, index, v);                                                       }
	VertexAttribPointer      :: inline proc "c" (index: u32, size: i32, type_: u32, normalized: u8, stride: i32, pointer: rawptr, loc := #caller_location)          {        impl_VertexAttribPointer(index, size, type_, normalized, stride, pointer); debug_helper(loc, 0, index, size, type_, normalized, stride, pointer);                }

	// VERSION_2_1
	UniformMatrix2x3fv :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32, loc := #caller_location) { impl_UniformMatrix2x3fv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value); }
	UniformMatrix3x2fv :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32, loc := #caller_location) { impl_UniformMatrix3x2fv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value); }
	UniformMatrix2x4fv :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32, loc := #caller_location) { impl_UniformMatrix2x4fv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value); }
	UniformMatrix4x2fv :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32, loc := #caller_location) { impl_UniformMatrix4x2fv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value); }
	UniformMatrix3x4fv :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32, loc := #caller_location) { impl_UniformMatrix3x4fv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value); }
	UniformMatrix4x3fv :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32, loc := #caller_location) { impl_UniformMatrix4x3fv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value); }

		// VERSION_3_0
	ColorMaski                          :: inline proc "c" (index: u32, r: u8, g: u8, b: u8, a: u8, loc := #caller_location)                                                                                 {        impl_ColorMaski(index, r, g, b, a);                                                         debug_helper(loc, 0, index, r, g, b, a);                                                                }
	GetBooleani_v                       :: inline proc "c" (target: u32, index: u32, data: ^u8, loc := #caller_location)                                                                                     {        impl_GetBooleani_v(target, index, data);                                                    debug_helper(loc, 0, target, index, data);                                                              }
	GetIntegeri_v                       :: inline proc "c" (target: u32, index: u32, data: ^i32, loc := #caller_location)                                                                                    {        impl_GetIntegeri_v(target, index, data);                                                    debug_helper(loc, 0, target, index, data);                                                              }
	Enablei                             :: inline proc "c" (target: u32, index: u32, loc := #caller_location)                                                                                                {        impl_Enablei(target, index);                                                                debug_helper(loc, 0, target, index);                                                                    }
	Disablei                            :: inline proc "c" (target: u32, index: u32, loc := #caller_location)                                                                                                {        impl_Disablei(target, index);                                                               debug_helper(loc, 0, target, index);                                                                    }
	IsEnabledi                          :: inline proc "c" (target: u32, index: u32, loc := #caller_location) -> u8                                                                                          { ret := impl_IsEnabledi(target, index);                                                             debug_helper(loc, 1, ret, target, index);                                                   return ret; }
	BeginTransformFeedback              :: inline proc "c" (primitiveMode: u32, loc := #caller_location)                                                                                                     {        impl_BeginTransformFeedback(primitiveMode);                                                 debug_helper(loc, 0, primitiveMode);                                                                    }
	EndTransformFeedback                :: inline proc "c" (loc := #caller_location)                                                                                                                         {        impl_EndTransformFeedback();                                                                debug_helper(loc, 0);                                                                                   }
	BindBufferRange                     :: inline proc "c" (target: u32, index: u32, buffer: u32, offset: int, size: int, loc := #caller_location)                                                           {        impl_BindBufferRange(target, index, buffer, offset, size);                                  debug_helper(loc, 0, target, index, buffer, offset, size);                                              }
	BindBufferBase                      :: inline proc "c" (target: u32, index: u32, buffer: u32, loc := #caller_location)                                                                                   {        impl_BindBufferBase(target, index, buffer);                                                 debug_helper(loc, 0, target, index, buffer);                                                            }
	TransformFeedbackVaryings           :: inline proc "c" (program: u32, count: i32, varyings: ^u8, bufferMode: u32, loc := #caller_location)                                                               {        impl_TransformFeedbackVaryings(program, count, varyings, bufferMode);                       debug_helper(loc, 0, program, count, varyings, bufferMode);                                             }
	GetTransformFeedbackVarying         :: inline proc "c" (program: u32, index: u32, bufSize: i32, length: ^i32, size: ^i32, type_: ^u32, name: ^u8, loc := #caller_location)                               {        impl_GetTransformFeedbackVarying(program, index, bufSize, length, size, type_, name);       debug_helper(loc, 0, program, index, bufSize, length, size, type_, name);                               }
	ClampColor                          :: inline proc "c" (target: u32, clamp: u32, loc := #caller_location)                                                                                                {        impl_ClampColor(target, clamp);                                                             debug_helper(loc, 0, target, clamp);                                                                    }
	BeginConditionalRender              :: inline proc "c" (id: u32, mode: u32, loc := #caller_location)                                                                                                     {        impl_BeginConditionalRender(id, mode);                                                      debug_helper(loc, 0, id, mode);                                                                         }
	EndConditionalRender                :: inline proc "c" (loc := #caller_location)                                                                                                                         {        impl_EndConditionalRender();                                                                debug_helper(loc, 0);                                                                                   }
	VertexAttribIPointer                :: inline proc "c" (index: u32, size: i32, type_: u32, stride: i32, pointer: rawptr, loc := #caller_location)                                                        {        impl_VertexAttribIPointer(index, size, type_, stride, pointer);                             debug_helper(loc, 0, index, size, type_, stride, pointer);                                              }
	GetVertexAttribIiv                  :: inline proc "c" (index: u32, pname: u32, params: ^i32, loc := #caller_location)                                                                                   {        impl_GetVertexAttribIiv(index, pname, params);                                              debug_helper(loc, 0, index, pname, params);                                                             }
	GetVertexAttribIuiv                 :: inline proc "c" (index: u32, pname: u32, params: ^u32, loc := #caller_location)                                                                                   {        impl_GetVertexAttribIuiv(index, pname, params);                                             debug_helper(loc, 0, index, pname, params);                                                             }
	VertexAttribI1i                     :: inline proc "c" (index: u32, x: i32, loc := #caller_location)                                                                                                     {        impl_VertexAttribI1i(index, x);                                                             debug_helper(loc, 0, index, x);                                                                         }
	VertexAttribI2i                     :: inline proc "c" (index: u32, x: i32, y: i32, loc := #caller_location)                                                                                             {        impl_VertexAttribI2i(index, x, y);                                                          debug_helper(loc, 0, index, x, y);                                                                      }
	VertexAttribI3i                     :: inline proc "c" (index: u32, x: i32, y: i32, z: i32, loc := #caller_location)                                                                                     {        impl_VertexAttribI3i(index, x, y, z);                                                       debug_helper(loc, 0, index, x, y, z);                                                                   }
	VertexAttribI4i                     :: inline proc "c" (index: u32, x: i32, y: i32, z: i32, w: i32, loc := #caller_location)                                                                             {        impl_VertexAttribI4i(index, x, y, z, w);                                                    debug_helper(loc, 0, index, x, y, z, w);                                                                }
	VertexAttribI1ui                    :: inline proc "c" (index: u32, x: u32, loc := #caller_location)                                                                                                     {        impl_VertexAttribI1ui(index, x);                                                            debug_helper(loc, 0, index, x);                                                                         }
	VertexAttribI2ui                    :: inline proc "c" (index: u32, x: u32, y: u32, loc := #caller_location)                                                                                             {        impl_VertexAttribI2ui(index, x, y);                                                         debug_helper(loc, 0, index, x, y);                                                                      }
	VertexAttribI3ui                    :: inline proc "c" (index: u32, x: u32, y: u32, z: u32, loc := #caller_location)                                                                                     {        impl_VertexAttribI3ui(index, x, y, z);                                                      debug_helper(loc, 0, index, x, y, z);                                                                   }
	VertexAttribI4ui                    :: inline proc "c" (index: u32, x: u32, y: u32, z: u32, w: u32, loc := #caller_location)                                                                             {        impl_VertexAttribI4ui(index, x, y, z, w);                                                   debug_helper(loc, 0, index, x, y, z, w);                                                                }
	VertexAttribI1iv                    :: inline proc "c" (index: u32, v: ^i32, loc := #caller_location)                                                                                                    {        impl_VertexAttribI1iv(index, v);                                                            debug_helper(loc, 0, index, v);                                                                         }
	VertexAttribI2iv                    :: inline proc "c" (index: u32, v: ^i32, loc := #caller_location)                                                                                                    {        impl_VertexAttribI2iv(index, v);                                                            debug_helper(loc, 0, index, v);                                                                         }
	VertexAttribI3iv                    :: inline proc "c" (index: u32, v: ^i32, loc := #caller_location)                                                                                                    {        impl_VertexAttribI3iv(index, v);                                                            debug_helper(loc, 0, index, v);                                                                         }
	VertexAttribI4iv                    :: inline proc "c" (index: u32, v: ^i32, loc := #caller_location)                                                                                                    {        impl_VertexAttribI4iv(index, v);                                                            debug_helper(loc, 0, index, v);                                                                         }
	VertexAttribI1uiv                   :: inline proc "c" (index: u32, v: ^u32, loc := #caller_location)                                                                                                    {        impl_VertexAttribI1uiv(index, v);                                                           debug_helper(loc, 0, index, v);                                                                         }
	VertexAttribI2uiv                   :: inline proc "c" (index: u32, v: ^u32, loc := #caller_location)                                                                                                    {        impl_VertexAttribI2uiv(index, v);                                                           debug_helper(loc, 0, index, v);                                                                         }
	VertexAttribI3uiv                   :: inline proc "c" (index: u32, v: ^u32, loc := #caller_location)                                                                                                    {        impl_VertexAttribI3uiv(index, v);                                                           debug_helper(loc, 0, index, v);                                                                         }
	VertexAttribI4uiv                   :: inline proc "c" (index: u32, v: ^u32, loc := #caller_location)                                                                                                    {        impl_VertexAttribI4uiv(index, v);                                                           debug_helper(loc, 0, index, v);                                                                         }
	VertexAttribI4bv                    :: inline proc "c" (index: u32, v: ^i8, loc := #caller_location)                                                                                                     {        impl_VertexAttribI4bv(index, v);                                                            debug_helper(loc, 0, index, v);                                                                         }
	VertexAttribI4sv                    :: inline proc "c" (index: u32, v: ^i16, loc := #caller_location)                                                                                                    {        impl_VertexAttribI4sv(index, v);                                                            debug_helper(loc, 0, index, v);                                                                         }
	VertexAttribI4ubv                   :: inline proc "c" (index: u32, v: ^u8, loc := #caller_location)                                                                                                     {        impl_VertexAttribI4ubv(index, v);                                                           debug_helper(loc, 0, index, v);                                                                         }
	VertexAttribI4usv                   :: inline proc "c" (index: u32, v: ^u16, loc := #caller_location)                                                                                                    {        impl_VertexAttribI4usv(index, v);                                                           debug_helper(loc, 0, index, v);                                                                         }
	GetUniformuiv                       :: inline proc "c" (program: u32, location: i32, params: ^u32, loc := #caller_location)                                                                              {        impl_GetUniformuiv(program, location, params);                                              debug_helper(loc, 0, program, location, params);                                                        }
	BindFragDataLocation                :: inline proc "c" (program: u32, color: u32, name: ^u8, loc := #caller_location)                                                                                    {        impl_BindFragDataLocation(program, color, name);                                            debug_helper(loc, 0, program, color, name);                                                             }
	GetFragDataLocation                 :: inline proc "c" (program: u32, name: ^u8, loc := #caller_location) -> i32                                                                                         { ret := impl_GetFragDataLocation(program, name);                                                    debug_helper(loc, 1, ret, program, name);                                                   return ret; }
	Uniform1ui                          :: inline proc "c" (location: i32, v0: u32, loc := #caller_location)                                                                                                 {        impl_Uniform1ui(location, v0);                                                              debug_helper(loc, 0, location, v0);                                                                     }
	Uniform2ui                          :: inline proc "c" (location: i32, v0: u32, v1: u32, loc := #caller_location)                                                                                        {        impl_Uniform2ui(location, v0, v1);                                                          debug_helper(loc, 0, location, v0, v1);                                                                 }
	Uniform3ui                          :: inline proc "c" (location: i32, v0: u32, v1: u32, v2: u32, loc := #caller_location)                                                                               {        impl_Uniform3ui(location, v0, v1, v2);                                                      debug_helper(loc, 0, location, v0, v1, v2);                                                             }
	Uniform4ui                          :: inline proc "c" (location: i32, v0: u32, v1: u32, v2: u32, v3: u32, loc := #caller_location)                                                                      {        impl_Uniform4ui(location, v0, v1, v2, v3);                                                  debug_helper(loc, 0, location, v0, v1, v2, v3);                                                         }
	Uniform1uiv                         :: inline proc "c" (location: i32, count: i32, value: ^u32, loc := #caller_location)                                                                                 {        impl_Uniform1uiv(location, count, value);                                                   debug_helper(loc, 0, location, count, value);                                                           }
	Uniform2uiv                         :: inline proc "c" (location: i32, count: i32, value: ^u32, loc := #caller_location)                                                                                 {        impl_Uniform2uiv(location, count, value);                                                   debug_helper(loc, 0, location, count, value);                                                           }
	Uniform3uiv                         :: inline proc "c" (location: i32, count: i32, value: ^u32, loc := #caller_location)                                                                                 {        impl_Uniform3uiv(location, count, value);                                                   debug_helper(loc, 0, location, count, value);                                                           }
	Uniform4uiv                         :: inline proc "c" (location: i32, count: i32, value: ^u32, loc := #caller_location)                                                                                 {        impl_Uniform4uiv(location, count, value);                                                   debug_helper(loc, 0, location, count, value);                                                           }
	TexParameterIiv                     :: inline proc "c" (target: u32, pname: u32, params: ^i32, loc := #caller_location)                                                                                  {        impl_TexParameterIiv(target, pname, params);                                                debug_helper(loc, 0, target, pname, params);                                                            }
	TexParameterIuiv                    :: inline proc "c" (target: u32, pname: u32, params: ^u32, loc := #caller_location)                                                                                  {        impl_TexParameterIuiv(target, pname, params);                                               debug_helper(loc, 0, target, pname, params);                                                            }
	GetTexParameterIiv                  :: inline proc "c" (target: u32, pname: u32, params: ^i32, loc := #caller_location)                                                                                  {        impl_GetTexParameterIiv(target, pname, params);                                             debug_helper(loc, 0, target, pname, params);                                                            }
	GetTexParameterIuiv                 :: inline proc "c" (target: u32, pname: u32, params: ^u32, loc := #caller_location)                                                                                  {        impl_GetTexParameterIuiv(target, pname, params);                                            debug_helper(loc, 0, target, pname, params);                                                            }
	ClearBufferiv                       :: inline proc "c" (buffer: u32, drawbuffer: i32, value: ^i32, loc := #caller_location)                                                                              {        impl_ClearBufferiv(buffer, drawbuffer, value);                                              debug_helper(loc, 0, buffer, drawbuffer, value);                                                        }
	ClearBufferuiv                      :: inline proc "c" (buffer: u32, drawbuffer: i32, value: ^u32, loc := #caller_location)                                                                              {        impl_ClearBufferuiv(buffer, drawbuffer, value);                                             debug_helper(loc, 0, buffer, drawbuffer, value);                                                        }
	ClearBufferfv                       :: inline proc "c" (buffer: u32, drawbuffer: i32, value: ^f32, loc := #caller_location)                                                                              {        impl_ClearBufferfv(buffer, drawbuffer, value);                                              debug_helper(loc, 0, buffer, drawbuffer, value);                                                        }
	ClearBufferfi                       :: inline proc "c" (buffer: u32, drawbuffer: i32, depth: f32, stencil: i32, loc := #caller_location) -> rawptr                                                       { ret := impl_ClearBufferfi(buffer, drawbuffer, depth, stencil);                                     debug_helper(loc, 1, ret, buffer, drawbuffer, depth, stencil);                              return ret; }
	GetStringi                          :: inline proc "c" (name: u32, index: u32, loc := #caller_location) -> u8                                                                                            { ret := impl_GetStringi(name, index);                                                               debug_helper(loc, 1, ret, name, index);                                                     return ret; }
	IsRenderbuffer                      :: inline proc "c" (renderbuffer: u32, loc := #caller_location) -> u8                                                                                                { ret := impl_IsRenderbuffer(renderbuffer);                                                          debug_helper(loc, 1, ret, renderbuffer);                                                    return ret; }
	BindRenderbuffer                    :: inline proc "c" (target: u32, renderbuffer: u32, loc := #caller_location)                                                                                         {        impl_BindRenderbuffer(target, renderbuffer);                                                debug_helper(loc, 0, target, renderbuffer);                                                             }
	DeleteRenderbuffers                 :: inline proc "c" (n: i32, renderbuffers: ^u32, loc := #caller_location)                                                                                            {        impl_DeleteRenderbuffers(n, renderbuffers);                                                 debug_helper(loc, 0, n, renderbuffers);                                                                 }
	GenRenderbuffers                    :: inline proc "c" (n: i32, renderbuffers: ^u32, loc := #caller_location)                                                                                            {        impl_GenRenderbuffers(n, renderbuffers);                                                    debug_helper(loc, 0, n, renderbuffers);                                                                 }
	RenderbufferStorage                 :: inline proc "c" (target: u32, internalformat: u32, width: i32, height: i32, loc := #caller_location)                                                              {        impl_RenderbufferStorage(target, internalformat, width, height);                            debug_helper(loc, 0, target, internalformat, width, height);                                            }
	GetRenderbufferParameteriv          :: inline proc "c" (target: u32, pname: u32, params: ^i32, loc := #caller_location)                                                                                  {        impl_GetRenderbufferParameteriv(target, pname, params);                                     debug_helper(loc, 0, target, pname, params);                                                            }
	IsFramebuffer                       :: inline proc "c" (framebuffer: u32, loc := #caller_location) -> u8                                                                                                 { ret := impl_IsFramebuffer(framebuffer);                                                            debug_helper(loc, 1, ret, framebuffer);                                                     return ret; }
	BindFramebuffer                     :: inline proc "c" (target: u32, framebuffer: u32, loc := #caller_location)                                                                                          {        impl_BindFramebuffer(target, framebuffer);                                                  debug_helper(loc, 0, target, framebuffer);                                                              }
	DeleteFramebuffers                  :: inline proc "c" (n: i32, framebuffers: ^u32, loc := #caller_location)                                                                                             {        impl_DeleteFramebuffers(n, framebuffers);                                                   debug_helper(loc, 0, n, framebuffers);                                                                  }
	GenFramebuffers                     :: inline proc "c" (n: i32, framebuffers: ^u32, loc := #caller_location)                                                                                             {        impl_GenFramebuffers(n, framebuffers);                                                      debug_helper(loc, 0, n, framebuffers);                                                                  }
	CheckFramebufferStatus              :: inline proc "c" (target: u32, loc := #caller_location) -> u32                                                                                                     { ret := impl_CheckFramebufferStatus(target);                                                        debug_helper(loc, 1, ret, target);                                                          return ret; }
	FramebufferTexture1D                :: inline proc "c" (target: u32, attachment: u32, textarget: u32, texture: u32, level: i32, loc := #caller_location)                                                 {        impl_FramebufferTexture1D(target, attachment, textarget, texture, level);                   debug_helper(loc, 0, target, attachment, textarget, texture, level);                                    }
	FramebufferTexture2D                :: inline proc "c" (target: u32, attachment: u32, textarget: u32, texture: u32, level: i32, loc := #caller_location)                                                 {        impl_FramebufferTexture2D(target, attachment, textarget, texture, level);                   debug_helper(loc, 0, target, attachment, textarget, texture, level);                                    }
	FramebufferTexture3D                :: inline proc "c" (target: u32, attachment: u32, textarget: u32, texture: u32, level: i32, zoffset: i32, loc := #caller_location)                                   {        impl_FramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);          debug_helper(loc, 0, target, attachment, textarget, texture, level, zoffset);                           }
	FramebufferRenderbuffer             :: inline proc "c" (target: u32, attachment: u32, renderbuffertarget: u32, renderbuffer: u32, loc := #caller_location)                                               {        impl_FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);         debug_helper(loc, 0, target, attachment, renderbuffertarget, renderbuffer);                             }
	GetFramebufferAttachmentParameteriv :: inline proc "c" (target: u32, attachment: u32, pname: u32, params: ^i32, loc := #caller_location)                                                                 {        impl_GetFramebufferAttachmentParameteriv(target, attachment, pname, params);                debug_helper(loc, 0, target, attachment, pname, params);                                                }
	GenerateMipmap                      :: inline proc "c" (target: u32, loc := #caller_location)                                                                                                            {        impl_GenerateMipmap(target);                                                                debug_helper(loc, 0, target);                                                                           }
	BlitFramebuffer                     :: inline proc "c" (srcX0: i32, srcY0: i32, srcX1: i32, srcY1: i32, dstX0: i32, dstY0: i32, dstX1: i32, dstY1: i32, mask: u32, filter: u32, loc := #caller_location) {        impl_BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); debug_helper(loc, 0, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);             }
	RenderbufferStorageMultisample      :: inline proc "c" (target: u32, samples: i32, internalformat: u32, width: i32, height: i32, loc := #caller_location)                                                {        impl_RenderbufferStorageMultisample(target, samples, internalformat, width, height);        debug_helper(loc, 0, target, samples, internalformat, width, height);                                   }
	FramebufferTextureLayer             :: inline proc "c" (target: u32, attachment: u32, texture: u32, level: i32, layer: i32, loc := #caller_location)                                                     {        impl_FramebufferTextureLayer(target, attachment, texture, level, layer);                    debug_helper(loc, 0, target, attachment, texture, level, layer);                                        }
	MapBufferRange                      :: inline proc "c" (target: u32, offset: int, length: int, access: u32, loc := #caller_location) -> rawptr                                                           { ret := impl_MapBufferRange(target, offset, length, access);                                        debug_helper(loc, 1, ret, target, offset, length, access);                                  return ret; }
	FlushMappedBufferRange              :: inline proc "c" (target: u32, offset: int, length: int, loc := #caller_location)                                                                                  {        impl_FlushMappedBufferRange(target, offset, length);                                        debug_helper(loc, 0, target, offset, length);                                                           }
	BindVertexArray                     :: inline proc "c" (array: u32, loc := #caller_location)                                                                                                             {        impl_BindVertexArray(array);                                                                debug_helper(loc, 0, array);                                                                            }
	DeleteVertexArrays                  :: inline proc "c" (n: i32, arrays: ^u32, loc := #caller_location)                                                                                                   {        impl_DeleteVertexArrays(n, arrays);                                                         debug_helper(loc, 0, n, arrays);                                                                        }
	GenVertexArrays                     :: inline proc "c" (n: i32, arrays: ^u32, loc := #caller_location)                                                                                                   {        impl_GenVertexArrays(n, arrays);                                                            debug_helper(loc, 0, n, arrays);                                                                        }
	IsVertexArray                       :: inline proc "c" (array: u32, loc := #caller_location) -> u8                                                                                                       { ret := impl_IsVertexArray(array);                                                                  debug_helper(loc, 1, ret, array);                                                           return ret; }

	// VERSION_3_1
	DrawArraysInstanced       :: inline proc "c" (mode: u32, first: i32, count: i32, instancecount: i32, loc := #caller_location)                                   {        impl_DrawArraysInstanced(mode, first, count, instancecount);                                   debug_helper(loc, 0, mode, first, count, instancecount);            }
	DrawElementsInstanced     :: inline proc "c" (mode: u32, count: i32, type_: u32, indices: rawptr, instancecount: i32, loc := #caller_location)                  {        impl_DrawElementsInstanced(mode, count, type_, indices, instancecount);                        debug_helper(loc, 0, mode, count, type_, indices, instancecount);            }
	TexBuffer                 :: inline proc "c" (target: u32, internalformat: u32, buffer: u32, loc := #caller_location)                                           {        impl_TexBuffer(target, internalformat, buffer);                                                debug_helper(loc, 0, target, internalformat, buffer);            }
	PrimitiveRestartIndex     :: inline proc "c" (index: u32, loc := #caller_location)                                                                              {        impl_PrimitiveRestartIndex(index);                                                             debug_helper(loc, 0, index);            }
	CopyBufferSubData         :: inline proc "c" (readTarget: u32, writeTarget: u32, readOffset: int, writeOffset: int, size: int, loc := #caller_location)         {        impl_CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);                debug_helper(loc, 0, readTarget, writeTarget, readOffset, writeOffset, size);            }
	GetUniformIndices         :: inline proc "c" (program: u32, uniformCount: i32, uniformNames: ^u8, uniformIndices: ^u32, loc := #caller_location)                {        impl_GetUniformIndices(program, uniformCount, uniformNames, uniformIndices);                   debug_helper(loc, 0, program, uniformCount, uniformNames, uniformIndices);            }
	GetActiveUniformsiv       :: inline proc "c" (program: u32, uniformCount: i32, uniformIndices: ^u32, pname: u32, params: ^i32, loc := #caller_location)         {        impl_GetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);                debug_helper(loc, 0, program, uniformCount, uniformIndices, pname, params);            }
	GetActiveUniformName      :: inline proc "c" (program: u32, uniformIndex: u32, bufSize: i32, length: ^i32, uniformName: ^u8, loc := #caller_location)           {        impl_GetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);                debug_helper(loc, 0, program, uniformIndex, bufSize, length, uniformName);            }
	GetUniformBlockIndex      :: inline proc "c" (program: u32, uniformBlockName: ^u8, loc := #caller_location) -> u32                                              { ret := impl_GetUniformBlockIndex(program, uniformBlockName);                                          debug_helper(loc, 1, ret, program, uniformBlockName); return ret; }
	GetActiveUniformBlockiv   :: inline proc "c" (program: u32, uniformBlockIndex: u32, pname: u32, params: ^i32, loc := #caller_location)                          {        impl_GetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);                       debug_helper(loc, 0, program, uniformBlockIndex, pname, params);            }
	GetActiveUniformBlockName :: inline proc "c" (program: u32, uniformBlockIndex: u32, bufSize: i32, length: ^i32, uniformBlockName: ^u8, loc := #caller_location) {        impl_GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName); debug_helper(loc, 0, program, uniformBlockIndex, bufSize, length, uniformBlockName);            }
	UniformBlockBinding       :: inline proc "c" (program: u32, uniformBlockIndex: u32, uniformBlockBinding: u32, loc := #caller_location)                          {        impl_UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);                     debug_helper(loc, 0, program, uniformBlockIndex, uniformBlockBinding);            }

	// VERSION_3_2
	DrawElementsBaseVertex          :: inline proc "c" (mode: u32, count: i32, type_: u32, indices: rawptr, basevertex: i32, loc := #caller_location)                                           {        impl_DrawElementsBaseVertex(mode, count, type_, indices, basevertex);                                    debug_helper(loc, 0, mode, count, type_, indices, basevertex);                                                 }
	DrawRangeElementsBaseVertex     :: inline proc "c" (mode: u32, start: u32, end: u32, count: i32, type_: u32, indices: rawptr, basevertex: i32, loc := #caller_location)                     {        impl_DrawRangeElementsBaseVertex(mode, start, end, count, type_, indices, basevertex);                   debug_helper(loc, 0, mode, start, end, count, type_, indices, basevertex);                                     }
	DrawElementsInstancedBaseVertex :: inline proc "c" (mode: u32, count: i32, type_: u32, indices: rawptr, instancecount: i32, basevertex: i32, loc := #caller_location)                       {        impl_DrawElementsInstancedBaseVertex(mode, count, type_, indices, instancecount, basevertex);            debug_helper(loc, 0, mode, count, type_, indices, instancecount, basevertex);                                  }
	MultiDrawElementsBaseVertex     :: inline proc "c" (mode: u32, count: ^i32, type_: u32, indices: ^rawptr, drawcount: i32, basevertex: ^i32, loc := #caller_location)                        {        impl_MultiDrawElementsBaseVertex(mode, count, type_, indices, drawcount, basevertex);                    debug_helper(loc, 0, mode, count, type_, indices, drawcount, basevertex);                                      }
	ProvokingVertex                 :: inline proc "c" (mode: u32, loc := #caller_location)                                                                                                     {        impl_ProvokingVertex(mode);                                                                              debug_helper(loc, 0, mode);                                                                                    }
	FenceSync                       :: inline proc "c" (condition: u32, flags: u32, loc := #caller_location) -> sync_t                                                                          { ret := impl_FenceSync(condition, flags);                                                                        debug_helper(loc, 1, ret, condition, flags);                                                       return ret; }
	IsSync                          :: inline proc "c" (sync: sync_t, loc := #caller_location) -> u8                                                                                            { ret := impl_IsSync(sync);                                                                                       debug_helper(loc, 1, ret, sync);                                                                   return ret; }
	DeleteSync                      :: inline proc "c" (sync: sync_t, loc := #caller_location)                                                                                                  {        impl_DeleteSync(sync);                                                                                   debug_helper(loc, 0, sync);                                                                                    }
	ClientWaitSync                  :: inline proc "c" (sync: sync_t, flags: u32, timeout: u64, loc := #caller_location) -> u32                                                                 { ret := impl_ClientWaitSync(sync, flags, timeout);                                                               debug_helper(loc, 1, ret, sync, flags, timeout);                                                   return ret; }
	WaitSync                        :: inline proc "c" (sync: sync_t, flags: u32, timeout: u64, loc := #caller_location)                                                                        {        impl_WaitSync(sync, flags, timeout);                                                                     debug_helper(loc, 0, sync, flags, timeout);                                                                    }
	GetInteger64v                   :: inline proc "c" (pname: u32, data: ^i64, loc := #caller_location)                                                                                        {        impl_GetInteger64v(pname, data);                                                                         debug_helper(loc, 0, pname, data);                                                                             }
	GetSynciv                       :: inline proc "c" (sync: sync_t, pname: u32, bufSize: i32, length: ^i32, values: ^i32, loc := #caller_location)                                            {        impl_GetSynciv(sync, pname, bufSize, length, values);                                                    debug_helper(loc, 0, sync, pname, bufSize, length, values);                                                    }
	GetInteger64i_v                 :: inline proc "c" (target: u32, index: u32, data: ^i64, loc := #caller_location)                                                                           {        impl_GetInteger64i_v(target, index, data);                                                               debug_helper(loc, 0, target, index, data);                                                                     }
	GetBufferParameteri64v          :: inline proc "c" (target: u32, pname: u32, params: ^i64, loc := #caller_location)                                                                         {        impl_GetBufferParameteri64v(target, pname, params);                                                      debug_helper(loc, 0, target, pname, params);                                                                   }
	FramebufferTexture              :: inline proc "c" (target: u32, attachment: u32, texture: u32, level: i32, loc := #caller_location)                                                        {        impl_FramebufferTexture(target, attachment, texture, level);                                             debug_helper(loc, 0, target, attachment, texture, level);                                                      }
	TexImage2DMultisample           :: inline proc "c" (target: u32, samples: i32, internalformat: u32, width: i32, height: i32, fixedsamplelocations: u8, loc := #caller_location)             {        impl_TexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);        debug_helper(loc, 0, target, samples, internalformat, width, height, fixedsamplelocations);                    }
	TexImage3DMultisample           :: inline proc "c" (target: u32, samples: i32, internalformat: u32, width: i32, height: i32, depth: i32, fixedsamplelocations: u8, loc := #caller_location) {        impl_TexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); debug_helper(loc, 0, target, samples, internalformat, width, height, depth, fixedsamplelocations);             }
	GetMultisamplefv                :: inline proc "c" (pname: u32, index: u32, val: ^f32, loc := #caller_location)                                                                             {        impl_GetMultisamplefv(pname, index, val);                                                                debug_helper(loc, 0, pname, index, val);                                                                       }
	SampleMaski                     :: inline proc "c" (maskNumber: u32, mask: u32, loc := #caller_location)                                                                                    {        impl_SampleMaski(maskNumber, mask);                                                                      debug_helper(loc, 0, maskNumber, mask);                                                                        }

	// VERSION_3_3
	BindFragDataLocationIndexed :: inline proc "c" (program: u32, colorNumber: u32, index: u32, name: ^u8, loc := #caller_location) {        impl_BindFragDataLocationIndexed(program, colorNumber, index, name); debug_helper(loc, 0, program, colorNumber, index, name);             }
	GetFragDataIndex            :: inline proc "c" (program: u32, name: ^u8, loc := #caller_location) -> i32                        { ret := impl_GetFragDataIndex(program, name);                                debug_helper(loc, 1, ret, program, name);                return ret; }
	GenSamplers                 :: inline proc "c" (count: i32, samplers: ^u32, loc := #caller_location)                            {        impl_GenSamplers(count, samplers);                                   debug_helper(loc, 0, count, samplers);                               }
	DeleteSamplers              :: inline proc "c" (count: i32, samplers: ^u32, loc := #caller_location)                            {        impl_DeleteSamplers(count, samplers);                                debug_helper(loc, 0, count, samplers);                               }
	IsSampler                   :: inline proc "c" (sampler: u32, loc := #caller_location) -> u8                                    { ret := impl_IsSampler(sampler);                                             debug_helper(loc, 1, ret, sampler);                      return ret; }
	BindSampler                 :: inline proc "c" (unit: u32, sampler: u32, loc := #caller_location)                               {        impl_BindSampler(unit, sampler);                                     debug_helper(loc, 0, unit, sampler);                                 }
	SamplerParameteri           :: inline proc "c" (sampler: u32, pname: u32, param: i32, loc := #caller_location)                  {        impl_SamplerParameteri(sampler, pname, param);                       debug_helper(loc, 0, sampler, pname, param);                         }
	SamplerParameteriv          :: inline proc "c" (sampler: u32, pname: u32, param: ^i32, loc := #caller_location)                 {        impl_SamplerParameteriv(sampler, pname, param);                      debug_helper(loc, 0, sampler, pname, param);                         }
	SamplerParameterf           :: inline proc "c" (sampler: u32, pname: u32, param: f32, loc := #caller_location)                  {        impl_SamplerParameterf(sampler, pname, param);                       debug_helper(loc, 0, sampler, pname, param);                         }
	SamplerParameterfv          :: inline proc "c" (sampler: u32, pname: u32, param: ^f32, loc := #caller_location)                 {        impl_SamplerParameterfv(sampler, pname, param);                      debug_helper(loc, 0, sampler, pname, param);                         }
	SamplerParameterIiv         :: inline proc "c" (sampler: u32, pname: u32, param: ^i32, loc := #caller_location)                 {        impl_SamplerParameterIiv(sampler, pname, param);                     debug_helper(loc, 0, sampler, pname, param);                         }
	SamplerParameterIuiv        :: inline proc "c" (sampler: u32, pname: u32, param: ^u32, loc := #caller_location)                 {        impl_SamplerParameterIuiv(sampler, pname, param);                    debug_helper(loc, 0, sampler, pname, param);                         }
	GetSamplerParameteriv       :: inline proc "c" (sampler: u32, pname: u32, params: ^i32, loc := #caller_location)                {        impl_GetSamplerParameteriv(sampler, pname, params);                  debug_helper(loc, 0, sampler, pname, params);                        }
	GetSamplerParameterIiv      :: inline proc "c" (sampler: u32, pname: u32, params: ^i32, loc := #caller_location)                {        impl_GetSamplerParameterIiv(sampler, pname, params);                 debug_helper(loc, 0, sampler, pname, params);                        }
	GetSamplerParameterfv       :: inline proc "c" (sampler: u32, pname: u32, params: ^f32, loc := #caller_location)                {        impl_GetSamplerParameterfv(sampler, pname, params);                  debug_helper(loc, 0, sampler, pname, params);                        }
	GetSamplerParameterIuiv     :: inline proc "c" (sampler: u32, pname: u32, params: ^u32, loc := #caller_location)                {        impl_GetSamplerParameterIuiv(sampler, pname, params);                debug_helper(loc, 0, sampler, pname, params);                        }
	QueryCounter                :: inline proc "c" (id: u32, target: u32, loc := #caller_location)                                  {        impl_QueryCounter(id, target);                                       debug_helper(loc, 0, id, target);                                    }
	GetQueryObjecti64v          :: inline proc "c" (id: u32, pname: u32, params: ^i64, loc := #caller_location)                     {        impl_GetQueryObjecti64v(id, pname, params);                          debug_helper(loc, 0, id, pname, params);                             }
	GetQueryObjectui64v         :: inline proc "c" (id: u32, pname: u32, params: ^u64, loc := #caller_location)                     {        impl_GetQueryObjectui64v(id, pname, params);                         debug_helper(loc, 0, id, pname, params);                             }
	VertexAttribDivisor         :: inline proc "c" (index: u32, divisor: u32, loc := #caller_location)                              {        impl_VertexAttribDivisor(index, divisor);                            debug_helper(loc, 0, index, divisor);                                }
	VertexAttribP1ui            :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: u32, loc := #caller_location)    {        impl_VertexAttribP1ui(index, type_, normalized, value);              debug_helper(loc, 0, index, type_, normalized, value);               }
	VertexAttribP1uiv           :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: ^u32, loc := #caller_location)   {        impl_VertexAttribP1uiv(index, type_, normalized, value);             debug_helper(loc, 0, index, type_, normalized, value);               }
	VertexAttribP2ui            :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: u32, loc := #caller_location)    {        impl_VertexAttribP2ui(index, type_, normalized, value);              debug_helper(loc, 0, index, type_, normalized, value);               }
	VertexAttribP2uiv           :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: ^u32, loc := #caller_location)   {        impl_VertexAttribP2uiv(index, type_, normalized, value);             debug_helper(loc, 0, index, type_, normalized, value);               }
	VertexAttribP3ui            :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: u32, loc := #caller_location)    {        impl_VertexAttribP3ui(index, type_, normalized, value);              debug_helper(loc, 0, index, type_, normalized, value);               }
	VertexAttribP3uiv           :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: ^u32, loc := #caller_location)   {        impl_VertexAttribP3uiv(index, type_, normalized, value);             debug_helper(loc, 0, index, type_, normalized, value);               }
	VertexAttribP4ui            :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: u32, loc := #caller_location)    {        impl_VertexAttribP4ui(index, type_, normalized, value);              debug_helper(loc, 0, index, type_, normalized, value);               }
	VertexAttribP4uiv           :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: ^u32, loc := #caller_location)   {        impl_VertexAttribP4uiv(index, type_, normalized, value);             debug_helper(loc, 0, index, type_, normalized, value);               }
	VertexP2ui                  :: inline proc "c" (type_: u32, value: u32, loc := #caller_location)                                {        impl_VertexP2ui(type_, value);                                       debug_helper(loc, 0, type_, value);                                  }
	VertexP2uiv                 :: inline proc "c" (type_: u32, value: ^u32, loc := #caller_location)                               {        impl_VertexP2uiv(type_, value);                                      debug_helper(loc, 0, type_, value);                                  }
	VertexP3ui                  :: inline proc "c" (type_: u32, value: u32, loc := #caller_location)                                {        impl_VertexP3ui(type_, value);                                       debug_helper(loc, 0, type_, value);                                  }
	VertexP3uiv                 :: inline proc "c" (type_: u32, value: ^u32, loc := #caller_location)                               {        impl_VertexP3uiv(type_, value);                                      debug_helper(loc, 0, type_, value);                                  }
	VertexP4ui                  :: inline proc "c" (type_: u32, value: u32, loc := #caller_location)                                {        impl_VertexP4ui(type_, value);                                       debug_helper(loc, 0, type_, value);                                  }
	VertexP4uiv                 :: inline proc "c" (type_: u32, value: ^u32, loc := #caller_location)                               {        impl_VertexP4uiv(type_, value);                                      debug_helper(loc, 0, type_, value);                                  }
	TexCoordP1ui                :: inline proc "c" (type_: u32, coords: u32, loc := #caller_location)                               {        impl_TexCoordP1ui(type_, coords);                                    debug_helper(loc, 0, type_, coords);                                 }
	TexCoordP1uiv               :: inline proc "c" (type_: u32, coords: ^u32, loc := #caller_location)                              {        impl_TexCoordP1uiv(type_, coords);                                   debug_helper(loc, 0, type_, coords);                                 }
	TexCoordP2ui                :: inline proc "c" (type_: u32, coords: u32, loc := #caller_location)                               {        impl_TexCoordP2ui(type_, coords);                                    debug_helper(loc, 0, type_, coords);                                 }
	TexCoordP2uiv               :: inline proc "c" (type_: u32, coords: ^u32, loc := #caller_location)                              {        impl_TexCoordP2uiv(type_, coords);                                   debug_helper(loc, 0, type_, coords);                                 }
	TexCoordP3ui                :: inline proc "c" (type_: u32, coords: u32, loc := #caller_location)                               {        impl_TexCoordP3ui(type_, coords);                                    debug_helper(loc, 0, type_, coords);                                 }
	TexCoordP3uiv               :: inline proc "c" (type_: u32, coords: ^u32, loc := #caller_location)                              {        impl_TexCoordP3uiv(type_, coords);                                   debug_helper(loc, 0, type_, coords);                                 }
	TexCoordP4ui                :: inline proc "c" (type_: u32, coords: u32, loc := #caller_location)                               {        impl_TexCoordP4ui(type_, coords);                                    debug_helper(loc, 0, type_, coords);                                 }
	TexCoordP4uiv               :: inline proc "c" (type_: u32, coords: ^u32, loc := #caller_location)                              {        impl_TexCoordP4uiv(type_, coords);                                   debug_helper(loc, 0, type_, coords);                                 }
	MultiTexCoordP1ui           :: inline proc "c" (texture: u32, type_: u32, coords: u32, loc := #caller_location)                 {        impl_MultiTexCoordP1ui(texture, type_, coords);                      debug_helper(loc, 0, texture, type_, coords);                        }
	MultiTexCoordP1uiv          :: inline proc "c" (texture: u32, type_: u32, coords: ^u32, loc := #caller_location)                {        impl_MultiTexCoordP1uiv(texture, type_, coords);                     debug_helper(loc, 0, texture, type_, coords);                        }
	MultiTexCoordP2ui           :: inline proc "c" (texture: u32, type_: u32, coords: u32, loc := #caller_location)                 {        impl_MultiTexCoordP2ui(texture, type_, coords);                      debug_helper(loc, 0, texture, type_, coords);                        }
	MultiTexCoordP2uiv          :: inline proc "c" (texture: u32, type_: u32, coords: ^u32, loc := #caller_location)                {        impl_MultiTexCoordP2uiv(texture, type_, coords);                     debug_helper(loc, 0, texture, type_, coords);                        }
	MultiTexCoordP3ui           :: inline proc "c" (texture: u32, type_: u32, coords: u32, loc := #caller_location)                 {        impl_MultiTexCoordP3ui(texture, type_, coords);                      debug_helper(loc, 0, texture, type_, coords);                        }
	MultiTexCoordP3uiv          :: inline proc "c" (texture: u32, type_: u32, coords: ^u32, loc := #caller_location)                {        impl_MultiTexCoordP3uiv(texture, type_, coords);                     debug_helper(loc, 0, texture, type_, coords);                        }
	MultiTexCoordP4ui           :: inline proc "c" (texture: u32, type_: u32, coords: u32, loc := #caller_location)                 {        impl_MultiTexCoordP4ui(texture, type_, coords);                      debug_helper(loc, 0, texture, type_, coords);                        }
	MultiTexCoordP4uiv          :: inline proc "c" (texture: u32, type_: u32, coords: ^u32, loc := #caller_location)                {        impl_MultiTexCoordP4uiv(texture, type_, coords);                     debug_helper(loc, 0, texture, type_, coords);                        }
	NormalP3ui                  :: inline proc "c" (type_: u32, coords: u32, loc := #caller_location)                               {        impl_NormalP3ui(type_, coords);                                      debug_helper(loc, 0, type_, coords);                                 }
	NormalP3uiv                 :: inline proc "c" (type_: u32, coords: ^u32, loc := #caller_location)                              {        impl_NormalP3uiv(type_, coords);                                     debug_helper(loc, 0, type_, coords);                                 }
	ColorP3ui                   :: inline proc "c" (type_: u32, color: u32, loc := #caller_location)                                {        impl_ColorP3ui(type_, color);                                        debug_helper(loc, 0, type_, color);                                  }
	ColorP3uiv                  :: inline proc "c" (type_: u32, color: ^u32, loc := #caller_location)                               {        impl_ColorP3uiv(type_, color);                                       debug_helper(loc, 0, type_, color);                                  }
	ColorP4ui                   :: inline proc "c" (type_: u32, color: u32, loc := #caller_location)                                {        impl_ColorP4ui(type_, color);                                        debug_helper(loc, 0, type_, color);                                  }
	ColorP4uiv                  :: inline proc "c" (type_: u32, color: ^u32, loc := #caller_location)                               {        impl_ColorP4uiv(type_, color);                                       debug_helper(loc, 0, type_, color);                                  }
	SecondaryColorP3ui          :: inline proc "c" (type_: u32, color: u32, loc := #caller_location)                                {        impl_SecondaryColorP3ui(type_, color);                               debug_helper(loc, 0, type_, color);                                  }
	SecondaryColorP3uiv         :: inline proc "c" (type_: u32, color: ^u32, loc := #caller_location)                               {        impl_SecondaryColorP3uiv(type_, color);                              debug_helper(loc, 0, type_, color);                                  }

	// VERSION_4_0
	MinSampleShading               :: inline proc "c" (value: f32, loc := #caller_location)                                                                        {        impl_MinSampleShading(value);                                                            debug_helper(loc, 0, value);                                                          }
	BlendEquationi                 :: inline proc "c" (buf: u32, mode: u32, loc := #caller_location)                                                               {        impl_BlendEquationi(buf, mode);                                                          debug_helper(loc, 0, buf, mode);                                                      }
	BlendEquationSeparatei         :: inline proc "c" (buf: u32, modeRGB: u32, modeAlpha: u32, loc := #caller_location)                                            {        impl_BlendEquationSeparatei(buf, modeRGB, modeAlpha);                                    debug_helper(loc, 0, buf, modeRGB, modeAlpha);                                        }
	BlendFunci                     :: inline proc "c" (buf: u32, src: u32, dst: u32, loc := #caller_location)                                                      {        impl_BlendFunci(buf, src, dst);                                                          debug_helper(loc, 0, buf, src, dst);                                                  }
	BlendFuncSeparatei             :: inline proc "c" (buf: u32, srcRGB: u32, dstRGB: u32, srcAlpha: u32, dstAlpha: u32, loc := #caller_location)                  {        impl_BlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);                        debug_helper(loc, 0, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);                        }
	DrawArraysIndirect             :: inline proc "c" (mode: u32, indirect: rawptr, loc := #caller_location)                                                       {        impl_DrawArraysIndirect(mode, indirect);                                                 debug_helper(loc, 0, mode, indirect);                                                 }
	DrawElementsIndirect           :: inline proc "c" (mode: u32, type_: u32, indirect: rawptr, loc := #caller_location)                                           {        impl_DrawElementsIndirect(mode, type_, indirect);                                        debug_helper(loc, 0, mode, type_, indirect);                                          }
	Uniform1d                      :: inline proc "c" (location: i32, x: f64, loc := #caller_location)                                                             {        impl_Uniform1d(location, x);                                                             debug_helper(loc, 0, location, x);                                                    }
	Uniform2d                      :: inline proc "c" (location: i32, x: f64, y: f64, loc := #caller_location)                                                     {        impl_Uniform2d(location, x, y);                                                          debug_helper(loc, 0, location, x, y);                                                 }
	Uniform3d                      :: inline proc "c" (location: i32, x: f64, y: f64, z: f64, loc := #caller_location)                                             {        impl_Uniform3d(location, x, y, z);                                                       debug_helper(loc, 0, location, x, y, z);                                              }
	Uniform4d                      :: inline proc "c" (location: i32, x: f64, y: f64, z: f64, w: f64, loc := #caller_location)                                     {        impl_Uniform4d(location, x, y, z, w);                                                    debug_helper(loc, 0, location, x, y, z, w);                                           }
	Uniform1dv                     :: inline proc "c" (location: i32, count: i32, value: ^f64, loc := #caller_location)                                            {        impl_Uniform1dv(location, count, value);                                                 debug_helper(loc, 0, location, count, value);                                         }
	Uniform2dv                     :: inline proc "c" (location: i32, count: i32, value: ^f64, loc := #caller_location)                                            {        impl_Uniform2dv(location, count, value);                                                 debug_helper(loc, 0, location, count, value);                                         }
	Uniform3dv                     :: inline proc "c" (location: i32, count: i32, value: ^f64, loc := #caller_location)                                            {        impl_Uniform3dv(location, count, value);                                                 debug_helper(loc, 0, location, count, value);                                         }
	Uniform4dv                     :: inline proc "c" (location: i32, count: i32, value: ^f64, loc := #caller_location)                                            {        impl_Uniform4dv(location, count, value);                                                 debug_helper(loc, 0, location, count, value);                                         }
	UniformMatrix2dv               :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64, loc := #caller_location)                             {        impl_UniformMatrix2dv(location, count, transpose, value);                                debug_helper(loc, 0, location, count, transpose, value);                              }
	UniformMatrix3dv               :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64, loc := #caller_location)                             {        impl_UniformMatrix3dv(location, count, transpose, value);                                debug_helper(loc, 0, location, count, transpose, value);                              }
	UniformMatrix4dv               :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64, loc := #caller_location)                             {        impl_UniformMatrix4dv(location, count, transpose, value);                                debug_helper(loc, 0, location, count, transpose, value);                              }
	UniformMatrix2x3dv             :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64, loc := #caller_location)                             {        impl_UniformMatrix2x3dv(location, count, transpose, value);                              debug_helper(loc, 0, location, count, transpose, value);                              }
	UniformMatrix2x4dv             :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64, loc := #caller_location)                             {        impl_UniformMatrix2x4dv(location, count, transpose, value);                              debug_helper(loc, 0, location, count, transpose, value);                              }
	UniformMatrix3x2dv             :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64, loc := #caller_location)                             {        impl_UniformMatrix3x2dv(location, count, transpose, value);                              debug_helper(loc, 0, location, count, transpose, value);                              }
	UniformMatrix3x4dv             :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64, loc := #caller_location)                             {        impl_UniformMatrix3x4dv(location, count, transpose, value);                              debug_helper(loc, 0, location, count, transpose, value);                              }
	UniformMatrix4x2dv             :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64, loc := #caller_location)                             {        impl_UniformMatrix4x2dv(location, count, transpose, value);                              debug_helper(loc, 0, location, count, transpose, value);                              }
	UniformMatrix4x3dv             :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64, loc := #caller_location)                             {        impl_UniformMatrix4x3dv(location, count, transpose, value);                              debug_helper(loc, 0, location, count, transpose, value);                              }
	GetUniformdv                   :: inline proc "c" (program: u32, location: i32, params: ^f64, loc := #caller_location)                                         {        impl_GetUniformdv(program, location, params);                                            debug_helper(loc, 0, program, location, params);                                      }
	GetSubroutineUniformLocation   :: inline proc "c" (program: u32, shadertype_: u32, name: ^u8, loc := #caller_location) -> i32                                  { ret := impl_GetSubroutineUniformLocation(program, shadertype_, name);                           debug_helper(loc, 1, ret, program, shadertype_, name);                    return ret; }
	GetSubroutineIndex             :: inline proc "c" (program: u32, shadertype_: u32, name: ^u8, loc := #caller_location) -> u32                                  { ret := impl_GetSubroutineIndex(program, shadertype_, name);                                     debug_helper(loc, 1, ret, program, shadertype_, name);                    return ret; }
	GetActiveSubroutineUniformiv   :: inline proc "c" (program: u32, shadertype_: u32, index: u32, pname: u32, values: ^i32, loc := #caller_location)              {        impl_GetActiveSubroutineUniformiv(program, shadertype_, index, pname, values);           debug_helper(loc, 0, program, shadertype_, index, pname, values);                     }
	GetActiveSubroutineUniformName :: inline proc "c" (program: u32, shadertype_: u32, index: u32, bufsize: i32, length: ^i32, name: ^u8, loc := #caller_location) {        impl_GetActiveSubroutineUniformName(program, shadertype_, index, bufsize, length, name); debug_helper(loc, 0, program, shadertype_, index, bufsize, length, name);             }
	GetActiveSubroutineName        :: inline proc "c" (program: u32, shadertype_: u32, index: u32, bufsize: i32, length: ^i32, name: ^u8, loc := #caller_location) {        impl_GetActiveSubroutineName(program, shadertype_, index, bufsize, length, name);        debug_helper(loc, 0, program, shadertype_, index, bufsize, length, name);             }
	UniformSubroutinesuiv          :: inline proc "c" (shadertype_: u32, count: i32, indices: ^u32, loc := #caller_location)                                       {        impl_UniformSubroutinesuiv(shadertype_, count, indices);                                 debug_helper(loc, 0, shadertype_, count, indices);                                    }
	GetUniformSubroutineuiv        :: inline proc "c" (shadertype_: u32, location: i32, params: ^u32, loc := #caller_location)                                     {        impl_GetUniformSubroutineuiv(shadertype_, location, params);                             debug_helper(loc, 0, shadertype_, location, params);                                  }
	GetProgramStageiv              :: inline proc "c" (program: u32, shadertype_: u32, pname: u32, values: ^i32, loc := #caller_location)                          {        impl_GetProgramStageiv(program, shadertype_, pname, values);                             debug_helper(loc, 0, program, shadertype_, pname, values);                            }
	PatchParameteri                :: inline proc "c" (pname: u32, value: i32, loc := #caller_location)                                                            {        impl_PatchParameteri(pname, value);                                                      debug_helper(loc, 0, pname, value);                                                   }
	PatchParameterfv               :: inline proc "c" (pname: u32, values: ^f32, loc := #caller_location)                                                          {        impl_PatchParameterfv(pname, values);                                                    debug_helper(loc, 0, pname, values);                                                  }
	BindTransformFeedback          :: inline proc "c" (target: u32, id: u32, loc := #caller_location)                                                              {        impl_BindTransformFeedback(target, id);                                                  debug_helper(loc, 0, target, id);                                                     }
	DeleteTransformFeedbacks       :: inline proc "c" (n: i32, ids: ^u32, loc := #caller_location)                                                                 {        impl_DeleteTransformFeedbacks(n, ids);                                                   debug_helper(loc, 0, n, ids);                                                         }
	GenTransformFeedbacks          :: inline proc "c" (n: i32, ids: ^u32, loc := #caller_location)                                                                 {        impl_GenTransformFeedbacks(n, ids);                                                      debug_helper(loc, 0, n, ids);                                                         }
	IsTransformFeedback            :: inline proc "c" (id: u32, loc := #caller_location) -> u8                                                                     { ret := impl_IsTransformFeedback(id);                                                            debug_helper(loc, 1, ret, id);                                            return ret; }
	PauseTransformFeedback         :: inline proc "c" (loc := #caller_location)                                                                                    {        impl_PauseTransformFeedback();                                                           debug_helper(loc, 0);                                                                 }
	ResumeTransformFeedback        :: inline proc "c" (loc := #caller_location)                                                                                    {        impl_ResumeTransformFeedback();                                                          debug_helper(loc, 0);                                                                 }
	DrawTransformFeedback          :: inline proc "c" (mode: u32, id: u32, loc := #caller_location)                                                                {        impl_DrawTransformFeedback(mode, id);                                                    debug_helper(loc, 0, mode, id);                                                       }
	DrawTransformFeedbackStream    :: inline proc "c" (mode: u32, id: u32, stream: u32, loc := #caller_location)                                                   {        impl_DrawTransformFeedbackStream(mode, id, stream);                                      debug_helper(loc, 0, mode, id, stream);                                               }
	BeginQueryIndexed              :: inline proc "c" (target: u32, index: u32, id: u32, loc := #caller_location)                                                  {        impl_BeginQueryIndexed(target, index, id);                                               debug_helper(loc, 0, target, index, id);                                              }
	EndQueryIndexed                :: inline proc "c" (target: u32, index: u32, loc := #caller_location)                                                           {        impl_EndQueryIndexed(target, index);                                                     debug_helper(loc, 0, target, index);                                                  }
	GetQueryIndexediv              :: inline proc "c" (target: u32, index: u32, pname: u32, params: ^i32, loc := #caller_location)                                 {        impl_GetQueryIndexediv(target, index, pname, params);                                    debug_helper(loc, 0, target, index, pname, params);                                   }
} else {
	// VERSION_1_0
	CullFace               :: inline proc "c" (mode: u32)                                                                                         {        impl_CullFace(mode);                                                                         }
	FrontFace              :: inline proc "c" (mode: u32)                                                                                         {        impl_FrontFace(mode);                                                                        }
	Hint                   :: inline proc "c" (target, mode: u32)                                                                                 {        impl_Hint(target, mode);                                                                     }
	LineWidth              :: inline proc "c" (width: f32)                                                                                        {        impl_LineWidth(width);                                                                       }
	PointSize              :: inline proc "c" (size: f32)                                                                                         {        impl_PointSize(size);                                                                        }
	PolygonMode            :: inline proc "c" (face, mode: u32)                                                                                   {        impl_PolygonMode(face, mode);                                                                }
	Scissor                :: inline proc "c" (x, y, width, height: i32)                                                                          {        impl_Scissor(x, y, width, height);                                                           }
	TexParameterf          :: inline proc "c" (target, pname: u32, param: f32)                                                                    {        impl_TexParameterf(target, pname, param);                                                    }
	TexParameterfv         :: inline proc "c" (target, pname: u32, params: ^f32)                                                                  {        impl_TexParameterfv(target, pname, params);                                                  }
	TexParameteri          :: inline proc "c" (target, pname: u32, param: i32)                                                                    {        impl_TexParameteri(target, pname, param);                                                    }
	TexParameteriv         :: inline proc "c" (target, pname: u32, params: ^i32)                                                                  {        impl_TexParameteriv(target, pname, params);                                                  }
	TexImage1D             :: inline proc "c" (target: u32, level, internalformat, width, border: i32, format, type: u32, pixels: rawptr)         {        impl_TexImage1D(target, level, internalformat, width, border, format, type, pixels);         }
	TexImage2D             :: inline proc "c" (target: u32, level, internalformat, width, height, border: i32, format, type: u32, pixels: rawptr) {        impl_TexImage2D(target, level, internalformat, width, height, border, format, type, pixels); }
	DrawBuffer             :: inline proc "c" (buf: u32)                                                                                          {        impl_DrawBuffer(buf);                                                                        }
	Clear                  :: inline proc "c" (mask: u32)                                                                                         {        impl_Clear(mask);                                                                            }
	ClearColor             :: inline proc "c" (red, green, blue, alpha: f32)                                                                      {        impl_ClearColor(red, green, blue, alpha);                                                    }
	ClearStencil           :: inline proc "c" (s: i32)                                                                                            {        impl_ClearStencil(s);                                                                        }
	ClearDepth             :: inline proc "c" (depth: f64)                                                                                        {        impl_ClearDepth(depth);                                                                      }
	StencilMask            :: inline proc "c" (mask: u32)                                                                                         {        impl_StencilMask(mask);                                                                      }
	ColorMask              :: inline proc "c" (red, green, blue, alpha: u8)                                                                       {        impl_ColorMask(red, green, blue, alpha);                                                     }
	DepthMask              :: inline proc "c" (flag: u8)                                                                                          {        impl_DepthMask(flag);                                                                        }
	Disable                :: inline proc "c" (cap: u32)                                                                                          {        impl_Disable(cap);                                                                           }
	Enable                 :: inline proc "c" (cap: u32)                                                                                          {        impl_Enable(cap);                                                                            }
	Finish                 :: inline proc "c" ()                                                                                                  {        impl_Finish();                                                                               }
	Flush                  :: inline proc "c" ()                                                                                                  {        impl_Flush();                                                                                }
	BlendFunc              :: inline proc "c" (sfactor, dfactor: u32)                                                                             {        impl_BlendFunc(sfactor, dfactor);                                                            }
	LogicOp                :: inline proc "c" (opcode: u32)                                                                                       {        impl_LogicOp(opcode);                                                                        }
	StencilFunc            :: inline proc "c" (func: u32, ref: i32, mask: u32)                                                                    {        impl_StencilFunc(func, ref, mask);                                                           }
	StencilOp              :: inline proc "c" (fail, zfail, zpass: u32)                                                                           {        impl_StencilOp(fail, zfail, zpass);                                                          }
	DepthFunc              :: inline proc "c" (func: u32)                                                                                         {        impl_DepthFunc(func);                                                                        }
	PixelStoref            :: inline proc "c" (pname: u32, param: f32)                                                                            {        impl_PixelStoref(pname, param);                                                              }
	PixelStorei            :: inline proc "c" (pname: u32, param: i32)                                                                            {        impl_PixelStorei(pname, param);                                                              }
	ReadBuffer             :: inline proc "c" (src: u32)                                                                                          {        impl_ReadBuffer(src);                                                                        }
	ReadPixels             :: inline proc "c" (x, y, width, height: i32, format, type: u32, pixels: rawptr)                                       {        impl_ReadPixels(x, y, width, height, format, type, pixels);                                  }
	GetBooleanv            :: inline proc "c" (pname: u32, data: ^u8)                                                                             {        impl_GetBooleanv(pname, data);                                                               }
	GetDoublev             :: inline proc "c" (pname: u32, data: ^f64)                                                                            {        impl_GetDoublev(pname, data);                                                                }
	GetError               :: inline proc "c" () -> u32                                                                                           { return impl_GetError();                                                                             }
	GetFloatv              :: inline proc "c" (pname: u32, data: ^f32)                                                                            {        impl_GetFloatv(pname, data);                                                                 }
	GetIntegerv            :: inline proc "c" (pname: u32, data: ^i32)                                                                            {        impl_GetIntegerv(pname, data);                                                               }
	GetString              :: inline proc "c" (name: u32) -> cstring                                                                              { return impl_GetString(name);                                                                        }
	GetTexImage            :: inline proc "c" (target: u32,  level: i32, format, type: u32, pixels: rawptr)                                       {        impl_GetTexImage(target,  level, format, type, pixels);                                      }
	GetTexParameterfv      :: inline proc "c" (target, pname: u32, params: ^f32)                                                                  {        impl_GetTexParameterfv(target, pname, params);                                               }
	GetTexParameteriv      :: inline proc "c" (target, pname: u32, params: ^i32)                                                                  {        impl_GetTexParameteriv(target, pname, params);                                               }
	GetTexLevelParameterfv :: inline proc "c" (target: u32, level: i32, pname: u32, params: ^f32)                                                 {        impl_GetTexLevelParameterfv(target, level, pname, params);                                   }
	GetTexLevelParameteriv :: inline proc "c" (target: u32, level: i32, pname: u32, params: ^i32)                                                 {        impl_GetTexLevelParameteriv(target, level, pname, params);                                   }
	IsEnabled              :: inline proc "c" (cap: u32) -> u8                                                                                    { return impl_IsEnabled(cap);                                                                         }
	DepthRange             :: inline proc "c" (near, far: f64)                                                                                    {        impl_DepthRange(near, far);                                                                  }
	Viewport               :: inline proc "c" (x, y, width, height: i32)                                                                          {        impl_Viewport(x, y, width, height);                                                          }

	// VERSION_1_1
	DrawArrays        :: inline proc "c" (mode: u32, first: i32, count: i32)                                                                                    {        impl_DrawArrays(mode, first, count);                                                      }
	DrawElements      :: inline proc "c" (mode: u32, count: i32, type: u32, indices: rawptr)                                                                    {        impl_DrawElements(mode, count, type, indices);                                            }
	PolygonOffset     :: inline proc "c" (factor: f32, units: f32)                                                                                              {        impl_PolygonOffset(factor, units);                                                        }
	CopyTexImage1D    :: inline proc "c" (target: u32, level: i32, internalformat: u32, x: i32, y: i32, width: i32, border: i32)                                {        impl_CopyTexImage1D(target, level, internalformat, x, y, width, border);                  }
	CopyTexImage2D    :: inline proc "c" (target: u32, level: i32, internalformat: u32, x: i32, y: i32, width: i32, height: i32, border: i32)                   {        impl_CopyTexImage2D(target, level, internalformat, x, y, width, height, border);          }
	CopyTexSubImage1D :: inline proc "c" (target: u32, level: i32, xoffset: i32, x: i32, y: i32, width: i32)                                                    {        impl_CopyTexSubImage1D(target, level, xoffset, x, y, width);                              }
	CopyTexSubImage2D :: inline proc "c" (target: u32, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32)                         {        impl_CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);             }
	TexSubImage1D     :: inline proc "c" (target: u32, level: i32, xoffset: i32, width: i32, format: u32, type: u32, pixels: rawptr)                            {        impl_TexSubImage1D(target, level, xoffset, width, format, type, pixels);                  }
	TexSubImage2D     :: inline proc "c" (target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, type: u32, pixels: rawptr) {        impl_TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); }
	BindTexture       :: inline proc "c" (target: u32, texture: u32)                                                                                            {        impl_BindTexture(target, texture);                                                        }
	DeleteTextures    :: inline proc "c" (n: i32, textures: ^u32)                                                                                               {        impl_DeleteTextures(n, textures);                                                         }
	GenTextures       :: inline proc "c" (n: i32, textures: ^u32)                                                                                               {        impl_GenTextures(n, textures);                                                            }
	IsTexture         :: inline proc "c" (texture: u32) -> u8                                                                                                   { return impl_IsTexture(texture);                                                                  }

	// VERSION_1_2
	DrawRangeElements :: inline proc "c" (mode, start, end: u32, count: i32, type: u32, indices: rawptr)                                               { impl_DrawRangeElements(mode, start, end, count, type, indices);                                           }
	TexImage3D        :: inline proc "c" (target: u32, level, internalformat, width, height, depth, border: i32, format, type: u32, pixels: rawptr)    { impl_TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);       }
	TexSubImage3D     :: inline proc "c" (target: u32, level, xoffset, yoffset, zoffset, width, height, depth: i32, format, type: u32, pixels: rawptr) { impl_TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
	CopyTexSubImage3D :: inline proc "c" (target: u32, level, xoffset, yoffset, zoffset, x, y, width, height: i32)                                     { impl_CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);                    }

	// VERSION_1_3
	ActiveTexture           :: inline proc "c" (texture: u32)                                                                                                                                      { impl_ActiveTexture(texture);                                                                                           }
	SampleCoverage          :: inline proc "c" (value: f32, invert: u8)                                                                                                                            { impl_SampleCoverage(value, invert);                                                                                    }
	CompressedTexImage3D    :: inline proc "c" (target: u32, level: i32, internalformat: u32, width: i32, height: i32, depth: i32, border: i32, imageSize: i32, data: rawptr)                      { impl_CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);               }
	CompressedTexImage2D    :: inline proc "c" (target: u32, level: i32, internalformat: u32, width: i32, height: i32, border: i32, imageSize: i32, data: rawptr)                                  { impl_CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);                      }
	CompressedTexImage1D    :: inline proc "c" (target: u32, level: i32, internalformat: u32, width: i32, border: i32, imageSize: i32, data: rawptr)                                               { impl_CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);                              }
	CompressedTexSubImage3D :: inline proc "c" (target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, imageSize: i32, data: rawptr) { impl_CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
	CompressedTexSubImage2D :: inline proc "c" (target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, imageSize: i32, data: rawptr)                           { impl_CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);                 }
	CompressedTexSubImage1D :: inline proc "c" (target: u32, level: i32, xoffset: i32, width: i32, format: u32, imageSize: i32, data: rawptr)                                                      { impl_CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);                                  }
	GetCompressedTexImage   :: inline proc "c" (target: u32, level: i32, img: rawptr)                                                                                                              { impl_GetCompressedTexImage(target, level, img);                                                                        }

	// VERSION_1_4
    BlendFuncSeparate :: inline proc "c" (sfactorRGB: u32, dfactorRGB: u32, sfactorAlpha: u32, dfactorAlpha: u32) { impl_BlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
    MultiDrawArrays   :: inline proc "c" (mode: u32, first: ^i32, count: ^i32, drawcount: i32)                    { impl_MultiDrawArrays(mode, first, count, drawcount);                        }
    MultiDrawElements :: inline proc "c" (mode: u32, count: ^i32, type_: u32, indices: ^rawptr, drawcount: i32)   { impl_MultiDrawElements(mode, count, type_, indices, drawcount);             }
    PointParameterf   :: inline proc "c" (pname: u32, param: f32)                                                 { impl_PointParameterf(pname, param);                                         }
    PointParameterfv  :: inline proc "c" (pname: u32, params: ^f32)                                               { impl_PointParameterfv(pname, params);                                       }
    PointParameteri   :: inline proc "c" (pname: u32, param: i32)                                                 { impl_PointParameteri(pname, param);                                         }
    PointParameteriv  :: inline proc "c" (pname: u32, params: ^i32)                                               { impl_PointParameteriv(pname, params);                                       }
    BlendColor        :: inline proc "c" (red: f32, green: f32, blue: f32, alpha: f32)                            { impl_BlendColor(red, green, blue, alpha);                                   }
    BlendEquation     :: inline proc "c" (mode: u32)                                                              { impl_BlendEquation(mode);                                                   }

    // VERSION_1_5
	GenQueries           :: inline proc "c" (n: i32, ids: ^u32)                                 {        impl_GenQueries(n, ids);                                       }
	DeleteQueries        :: inline proc "c" (n: i32, ids: ^u32)                                 {        impl_DeleteQueries(n, ids);                                    }
	IsQuery              :: inline proc "c" (id: u32) -> u8                                     { ret := impl_IsQuery(id);                                  return ret; }
	BeginQuery           :: inline proc "c" (target: u32, id: u32)                              {        impl_BeginQuery(target, id);                                   }
	EndQuery             :: inline proc "c" (target: u32)                                       {        impl_EndQuery(target);                                         }
	GetQueryiv           :: inline proc "c" (target: u32, pname: u32, params: ^i32)             {        impl_GetQueryiv(target, pname, params);                        }
	GetQueryObjectiv     :: inline proc "c" (id: u32, pname: u32, params: ^i32)                 {        impl_GetQueryObjectiv(id, pname, params);                      }
	GetQueryObjectuiv    :: inline proc "c" (id: u32, pname: u32, params: ^u32)                 {        impl_GetQueryObjectuiv(id, pname, params);                     }
	BindBuffer           :: inline proc "c" (target: u32, buffer: u32)                          {        impl_BindBuffer(target, buffer);                               }
	DeleteBuffers        :: inline proc "c" (n: i32, buffers: ^u32)                             {        impl_DeleteBuffers(n, buffers);                                }
	GenBuffers           :: inline proc "c" (n: i32, buffers: ^u32)                             {        impl_GenBuffers(n, buffers);                                   }
	IsBuffer             :: inline proc "c" (buffer: u32) -> u8                                 { ret := impl_IsBuffer(buffer);                             return ret; }
	BufferData           :: inline proc "c" (target: u32, size: int, data: rawptr, usage: u32)  {        impl_BufferData(target, size, data, usage);                    }
	BufferSubData        :: inline proc "c" (target: u32, offset: int, size: int, data: rawptr) {        impl_BufferSubData(target, offset, size, data);                }
	GetBufferSubData     :: inline proc "c" (target: u32, offset: int, size: int, data: rawptr) {        impl_GetBufferSubData(target, offset, size, data);             }
	MapBuffer            :: inline proc "c" (target: u32, access: u32) -> rawptr                { ret := impl_MapBuffer(target, access);                    return ret; }
	UnmapBuffer          :: inline proc "c" (target: u32) -> u8                                 { ret := impl_UnmapBuffer(target);                          return ret; }
	GetBufferParameteriv :: inline proc "c" (target: u32, pname: u32, params: ^i32)             {        impl_GetBufferParameteriv(target, pname, params);              }
	GetBufferPointerv    :: inline proc "c" (target: u32, pname: u32, params: ^rawptr)          {        impl_GetBufferPointerv(target, pname, params);                 }

	// VERSION_2_0
	BlendEquationSeparate    :: inline proc "c" (modeRGB: u32, modeAlpha: u32)                                                             {        impl_BlendEquationSeparate(modeRGB, modeAlpha);                                        }
	DrawBuffers              :: inline proc "c" (n: i32, bufs: ^u32)                                                                       {        impl_DrawBuffers(n, bufs);                                                             }
	StencilOpSeparate        :: inline proc "c" (face: u32, sfail: u32, dpfail: u32, dppass: u32)                                          {        impl_StencilOpSeparate(face, sfail, dpfail, dppass);                                   }
	StencilFuncSeparate      :: inline proc "c" (face: u32, func: u32, ref: i32, mask: u32)                                                {        impl_StencilFuncSeparate(face, func, ref, mask);                                       }
	StencilMaskSeparate      :: inline proc "c" (face: u32, mask: u32)                                                                     {        impl_StencilMaskSeparate(face, mask);                                                  }
	AttachShader             :: inline proc "c" (program: u32, shader: u32)                                                                {        impl_AttachShader(program, shader);                                                    }
	BindAttribLocation       :: inline proc "c" (program: u32, index: u32, name: ^u8)                                                      {        impl_BindAttribLocation(program, index, name);                                         }
	CompileShader            :: inline proc "c" (shader: u32)                                                                              {        impl_CompileShader(shader);                                                            }
	CreateProgram            :: inline proc "c" () -> u32                                                                                  { ret := impl_CreateProgram();                                                      return ret; }
	CreateShader             :: inline proc "c" (type_: u32) -> u32                                                                        { ret := impl_CreateShader(type_);                                                  return ret; }
	DeleteProgram            :: inline proc "c" (program: u32)                                                                             {        impl_DeleteProgram(program);                                                           }
	DeleteShader             :: inline proc "c" (shader: u32)                                                                              {        impl_DeleteShader(shader);                                                             }
	DetachShader             :: inline proc "c" (program: u32, shader: u32)                                                                {        impl_DetachShader(program, shader);                                                    }
	DisableVertexAttribArray :: inline proc "c" (index: u32)                                                                               {        impl_DisableVertexAttribArray(index);                                                  }
	EnableVertexAttribArray  :: inline proc "c" (index: u32)                                                                               {        impl_EnableVertexAttribArray(index);                                                   }
	GetActiveAttrib          :: inline proc "c" (program: u32, index: u32, bufSize: i32, length: ^i32, size: ^i32, type_: ^u32, name: ^u8) {        impl_GetActiveAttrib(program, index, bufSize, length, size, type_, name);              }
	GetActiveUniform         :: inline proc "c" (program: u32, index: u32, bufSize: i32, length: ^i32, size: ^i32, type_: ^u32, name: ^u8) {        impl_GetActiveUniform(program, index, bufSize, length, size, type_, name);             }
	GetAttachedShaders       :: inline proc "c" (program: u32, maxCount: i32, count: ^i32, shaders: ^u32)                                  {        impl_GetAttachedShaders(program, maxCount, count, shaders);                            }
	GetAttribLocation        :: inline proc "c" (program: u32, name: cstring) -> i32                                                       { ret := impl_GetAttribLocation(program, name);                                     return ret; }
	GetProgramiv             :: inline proc "c" (program: u32, pname: u32, params: ^i32)                                                   {        impl_GetProgramiv(program, pname, params);                                             }
	GetProgramInfoLog        :: inline proc "c" (program: u32, bufSize: i32, length: ^i32, infoLog: ^u8)                                   {        impl_GetProgramInfoLog(program, bufSize, length, infoLog);                             }
	GetShaderiv              :: inline proc "c" (shader: u32, pname: u32, params: ^i32)                                                    {        impl_GetShaderiv(shader, pname, params);                                               }
	GetShaderInfoLog         :: inline proc "c" (shader: u32, bufSize: i32, length: ^i32, infoLog: ^u8)                                    {        impl_GetShaderInfoLog(shader, bufSize, length, infoLog);                               }
	GetShaderSource          :: inline proc "c" (shader: u32, bufSize: i32, length: ^i32, source: ^u8)                                     {        impl_GetShaderSource(shader, bufSize, length, source);                                 }
	GetUniformLocation       :: inline proc "c" (program: u32, name: cstring) -> i32                                                       { ret := impl_GetUniformLocation(program, name);                                    return ret; }
	GetUniformfv             :: inline proc "c" (program: u32, location: i32, params: ^f32)                                                {        impl_GetUniformfv(program, location, params);                                          }
	GetUniformiv             :: inline proc "c" (program: u32, location: i32, params: ^i32)                                                {        impl_GetUniformiv(program, location, params);                                          }
	GetVertexAttribdv        :: inline proc "c" (index: u32, pname: u32, params: ^f64)                                                     {        impl_GetVertexAttribdv(index, pname, params);                                          }
	GetVertexAttribfv        :: inline proc "c" (index: u32, pname: u32, params: ^f32)                                                     {        impl_GetVertexAttribfv(index, pname, params);                                          }
	GetVertexAttribiv        :: inline proc "c" (index: u32, pname: u32, params: ^i32)                                                     {        impl_GetVertexAttribiv(index, pname, params);                                          }
	GetVertexAttribPointerv  :: inline proc "c" (index: u32, pname: u32, pointer: ^rawptr)                                                 {        impl_GetVertexAttribPointerv(index, pname, pointer);                                   }
	IsProgram                :: inline proc "c" (program: u32) -> u8                                                                       { ret := impl_IsProgram(program);                                                   return ret; }
	IsShader                 :: inline proc "c" (shader: u32) -> u8                                                                        { ret := impl_IsShader(shader);                                                     return ret; }
	LinkProgram              :: inline proc "c" (program: u32)                                                                             {        impl_LinkProgram(program);                                                             }
	ShaderSource             :: inline proc "c" (shader: u32, count: i32, string: ^^u8, length: ^i32)                                      {        impl_ShaderSource(shader, count, string, length);                                      }
	UseProgram               :: inline proc "c" (program: u32)                                                                             {        impl_UseProgram(program);                                                              }
	Uniform1f                :: inline proc "c" (location: i32, v0: f32)                                                                   {        impl_Uniform1f(location, v0);                                                          }
	Uniform2f                :: inline proc "c" (location: i32, v0: f32, v1: f32)                                                          {        impl_Uniform2f(location, v0, v1);                                                      }
	Uniform3f                :: inline proc "c" (location: i32, v0: f32, v1: f32, v2: f32)                                                 {        impl_Uniform3f(location, v0, v1, v2);                                                  }
	Uniform4f                :: inline proc "c" (location: i32, v0: f32, v1: f32, v2: f32, v3: f32)                                        {        impl_Uniform4f(location, v0, v1, v2, v3);                                              }
	Uniform1i                :: inline proc "c" (location: i32, v0: i32)                                                                   {        impl_Uniform1i(location, v0);                                                          }
	Uniform2i                :: inline proc "c" (location: i32, v0: i32, v1: i32)                                                          {        impl_Uniform2i(location, v0, v1);                                                      }
	Uniform3i                :: inline proc "c" (location: i32, v0: i32, v1: i32, v2: i32)                                                 {        impl_Uniform3i(location, v0, v1, v2);                                                  }
	Uniform4i                :: inline proc "c" (location: i32, v0: i32, v1: i32, v2: i32, v3: i32)                                        {        impl_Uniform4i(location, v0, v1, v2, v3);                                              }
	Uniform1fv               :: inline proc "c" (location: i32, count: i32, value: ^f32)                                                   {        impl_Uniform1fv(location, count, value);                                               }
	Uniform2fv               :: inline proc "c" (location: i32, count: i32, value: ^f32)                                                   {        impl_Uniform2fv(location, count, value);                                               }
	Uniform3fv               :: inline proc "c" (location: i32, count: i32, value: ^f32)                                                   {        impl_Uniform3fv(location, count, value);                                               }
	Uniform4fv               :: inline proc "c" (location: i32, count: i32, value: ^f32)                                                   {        impl_Uniform4fv(location, count, value);                                               }
	Uniform1iv               :: inline proc "c" (location: i32, count: i32, value: ^i32)                                                   {        impl_Uniform1iv(location, count, value);                                               }
	Uniform2iv               :: inline proc "c" (location: i32, count: i32, value: ^i32)                                                   {        impl_Uniform2iv(location, count, value);                                               }
	Uniform3iv               :: inline proc "c" (location: i32, count: i32, value: ^i32)                                                   {        impl_Uniform3iv(location, count, value);                                               }
	Uniform4iv               :: inline proc "c" (location: i32, count: i32, value: ^i32)                                                   {        impl_Uniform4iv(location, count, value);                                               }
	UniformMatrix2fv         :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32)                                    {        impl_UniformMatrix2fv(location, count, transpose, value);                              }
	UniformMatrix3fv         :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32)                                    {        impl_UniformMatrix3fv(location, count, transpose, value);                              }
	UniformMatrix4fv         :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32)                                    {        impl_UniformMatrix4fv(location, count, transpose, value);                              }
	ValidateProgram          :: inline proc "c" (program: u32)                                                                             {        impl_ValidateProgram(program);                                                         }
	VertexAttrib1d           :: inline proc "c" (index: u32, x: f64)                                                                       {        impl_VertexAttrib1d(index, x);                                                         }
	VertexAttrib1dv          :: inline proc "c" (index: u32, v: ^f64)                                                                      {        impl_VertexAttrib1dv(index, v);                                                        }
	VertexAttrib1f           :: inline proc "c" (index: u32, x: f32)                                                                       {        impl_VertexAttrib1f(index, x);                                                         }
	VertexAttrib1fv          :: inline proc "c" (index: u32, v: ^f32)                                                                      {        impl_VertexAttrib1fv(index, v);                                                        }
	VertexAttrib1s           :: inline proc "c" (index: u32, x: i16)                                                                       {        impl_VertexAttrib1s(index, x);                                                         }
	VertexAttrib1sv          :: inline proc "c" (index: u32, v: ^i16)                                                                      {        impl_VertexAttrib1sv(index, v);                                                        }
	VertexAttrib2d           :: inline proc "c" (index: u32, x: f64, y: f64)                                                               {        impl_VertexAttrib2d(index, x, y);                                                      }
	VertexAttrib2dv          :: inline proc "c" (index: u32, v: ^f64)                                                                      {        impl_VertexAttrib2dv(index, v);                                                        }
	VertexAttrib2f           :: inline proc "c" (index: u32, x: f32, y: f32)                                                               {        impl_VertexAttrib2f(index, x, y);                                                      }
	VertexAttrib2fv          :: inline proc "c" (index: u32, v: ^f32)                                                                      {        impl_VertexAttrib2fv(index, v);                                                        }
	VertexAttrib2s           :: inline proc "c" (index: u32, x: i16, y: i16)                                                               {        impl_VertexAttrib2s(index, x, y);                                                      }
	VertexAttrib2sv          :: inline proc "c" (index: u32, v: ^i16)                                                                      {        impl_VertexAttrib2sv(index, v);                                                        }
	VertexAttrib3d           :: inline proc "c" (index: u32, x: f64, y: f64, z: f64)                                                       {        impl_VertexAttrib3d(index, x, y, z);                                                   }
	VertexAttrib3dv          :: inline proc "c" (index: u32, v: ^f64)                                                                      {        impl_VertexAttrib3dv(index, v);                                                        }
	VertexAttrib3f           :: inline proc "c" (index: u32, x: f32, y: f32, z: f32)                                                       {        impl_VertexAttrib3f(index, x, y, z);                                                   }
	VertexAttrib3fv          :: inline proc "c" (index: u32, v: ^f32)                                                                      {        impl_VertexAttrib3fv(index, v);                                                        }
	VertexAttrib3s           :: inline proc "c" (index: u32, x: i16, y: i16, z: i16)                                                       {        impl_VertexAttrib3s(index, x, y, z);                                                   }
	VertexAttrib3sv          :: inline proc "c" (index: u32, v: ^i16)                                                                      {        impl_VertexAttrib3sv(index, v);                                                        }
	VertexAttrib4Nbv         :: inline proc "c" (index: u32, v: ^i8)                                                                       {        impl_VertexAttrib4Nbv(index, v);                                                       }
	VertexAttrib4Niv         :: inline proc "c" (index: u32, v: ^i32)                                                                      {        impl_VertexAttrib4Niv(index, v);                                                       }
	VertexAttrib4Nsv         :: inline proc "c" (index: u32, v: ^i16)                                                                      {        impl_VertexAttrib4Nsv(index, v);                                                       }
	VertexAttrib4Nub         :: inline proc "c" (index: u32, x: u8, y: u8, z: u8, w: u8)                                                   {        impl_VertexAttrib4Nub(index, x, y, z, w);                                              }
	VertexAttrib4Nubv        :: inline proc "c" (index: u32, v: ^u8)                                                                       {        impl_VertexAttrib4Nubv(index, v);                                                      }
	VertexAttrib4Nuiv        :: inline proc "c" (index: u32, v: ^u32)                                                                      {        impl_VertexAttrib4Nuiv(index, v);                                                      }
	VertexAttrib4Nusv        :: inline proc "c" (index: u32, v: ^u16)                                                                      {        impl_VertexAttrib4Nusv(index, v);                                                      }
	VertexAttrib4bv          :: inline proc "c" (index: u32, v: ^i8)                                                                       {        impl_VertexAttrib4bv(index, v);                                                        }
	VertexAttrib4d           :: inline proc "c" (index: u32, x: f64, y: f64, z: f64, w: f64)                                               {        impl_VertexAttrib4d(index, x, y, z, w);                                                }
	VertexAttrib4dv          :: inline proc "c" (index: u32, v: ^f64)                                                                      {        impl_VertexAttrib4dv(index, v);                                                        }
	VertexAttrib4f           :: inline proc "c" (index: u32, x: f32, y: f32, z: f32, w: f32)                                               {        impl_VertexAttrib4f(index, x, y, z, w);                                                }
	VertexAttrib4fv          :: inline proc "c" (index: u32, v: ^f32)                                                                      {        impl_VertexAttrib4fv(index, v);                                                        }
	VertexAttrib4iv          :: inline proc "c" (index: u32, v: ^i32)                                                                      {        impl_VertexAttrib4iv(index, v);                                                        }
	VertexAttrib4s           :: inline proc "c" (index: u32, x: i16, y: i16, z: i16, w: i16)                                               {        impl_VertexAttrib4s(index, x, y, z, w);                                                }
	VertexAttrib4sv          :: inline proc "c" (index: u32, v: ^i16)                                                                      {        impl_VertexAttrib4sv(index, v);                                                        }
	VertexAttrib4ubv         :: inline proc "c" (index: u32, v: ^u8)                                                                       {        impl_VertexAttrib4ubv(index, v);                                                       }
	VertexAttrib4uiv         :: inline proc "c" (index: u32, v: ^u32)                                                                      {        impl_VertexAttrib4uiv(index, v);                                                       }
	VertexAttrib4usv         :: inline proc "c" (index: u32, v: ^u16)                                                                      {        impl_VertexAttrib4usv(index, v);                                                       }
	VertexAttribPointer      :: inline proc "c" (index: u32, size: i32, type_: u32, normalized: u8, stride: i32, pointer: rawptr)          {        impl_VertexAttribPointer(index, size, type_, normalized, stride, pointer);             }

	// VERSION_2_1
	UniformMatrix2x3fv :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32) { impl_UniformMatrix2x3fv(location, count, transpose, value); }
	UniformMatrix3x2fv :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32) { impl_UniformMatrix3x2fv(location, count, transpose, value); }
	UniformMatrix2x4fv :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32) { impl_UniformMatrix2x4fv(location, count, transpose, value); }
	UniformMatrix4x2fv :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32) { impl_UniformMatrix4x2fv(location, count, transpose, value); }
	UniformMatrix3x4fv :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32) { impl_UniformMatrix3x4fv(location, count, transpose, value); }
	UniformMatrix4x3fv :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f32) { impl_UniformMatrix4x3fv(location, count, transpose, value); }


	// VERSION_3_0
	ColorMaski                          :: inline proc "c" (index: u32, r: u8, g: u8, b: u8, a: u8)                                                                                 {        impl_ColorMaski(index, r, g, b, a);                                                                     }
	GetBooleani_v                       :: inline proc "c" (target: u32, index: u32, data: ^u8)                                                                                     {        impl_GetBooleani_v(target, index, data);                                                                }
	GetIntegeri_v                       :: inline proc "c" (target: u32, index: u32, data: ^i32)                                                                                    {        impl_GetIntegeri_v(target, index, data);                                                                }
	Enablei                             :: inline proc "c" (target: u32, index: u32)                                                                                                {        impl_Enablei(target, index);                                                                            }
	Disablei                            :: inline proc "c" (target: u32, index: u32)                                                                                                {        impl_Disablei(target, index);                                                                           }
	IsEnabledi                          :: inline proc "c" (target: u32, index: u32) -> u8                                                                                          { ret := impl_IsEnabledi(target, index);                                                             return ret; }
	BeginTransformFeedback              :: inline proc "c" (primitiveMode: u32)                                                                                                     {        impl_BeginTransformFeedback(primitiveMode);                                                             }
	EndTransformFeedback                :: inline proc "c" ()                                                                                                                       {        impl_EndTransformFeedback();                                                                            }
	BindBufferRange                     :: inline proc "c" (target: u32, index: u32, buffer: u32, offset: int, size: int)                                                           {        impl_BindBufferRange(target, index, buffer, offset, size);                                              }
	BindBufferBase                      :: inline proc "c" (target: u32, index: u32, buffer: u32)                                                                                   {        impl_BindBufferBase(target, index, buffer);                                                             }
	TransformFeedbackVaryings           :: inline proc "c" (program: u32, count: i32, varyings: ^u8, bufferMode: u32)                                                               {        impl_TransformFeedbackVaryings(program, count, varyings, bufferMode);                                   }
	GetTransformFeedbackVarying         :: inline proc "c" (program: u32, index: u32, bufSize: i32, length: ^i32, size: ^i32, type_: ^u32, name: ^u8)                               {        impl_GetTransformFeedbackVarying(program, index, bufSize, length, size, type_, name);                   }
	ClampColor                          :: inline proc "c" (target: u32, clamp: u32)                                                                                                {        impl_ClampColor(target, clamp);                                                                         }
	BeginConditionalRender              :: inline proc "c" (id: u32, mode: u32)                                                                                                     {        impl_BeginConditionalRender(id, mode);                                                                  }
	EndConditionalRender                :: inline proc "c" ()                                                                                                                       {        impl_EndConditionalRender();                                                                            }
	VertexAttribIPointer                :: inline proc "c" (index: u32, size: i32, type_: u32, stride: i32, pointer: rawptr)                                                        {        impl_VertexAttribIPointer(index, size, type_, stride, pointer);                                         }
	GetVertexAttribIiv                  :: inline proc "c" (index: u32, pname: u32, params: ^i32)                                                                                   {        impl_GetVertexAttribIiv(index, pname, params);                                                          }
	GetVertexAttribIuiv                 :: inline proc "c" (index: u32, pname: u32, params: ^u32)                                                                                   {        impl_GetVertexAttribIuiv(index, pname, params);                                                         }
	VertexAttribI1i                     :: inline proc "c" (index: u32, x: i32)                                                                                                     {        impl_VertexAttribI1i(index, x);                                                                         }
	VertexAttribI2i                     :: inline proc "c" (index: u32, x: i32, y: i32)                                                                                             {        impl_VertexAttribI2i(index, x, y);                                                                      }
	VertexAttribI3i                     :: inline proc "c" (index: u32, x: i32, y: i32, z: i32)                                                                                     {        impl_VertexAttribI3i(index, x, y, z);                                                                   }
	VertexAttribI4i                     :: inline proc "c" (index: u32, x: i32, y: i32, z: i32, w: i32)                                                                             {        impl_VertexAttribI4i(index, x, y, z, w);                                                                }
	VertexAttribI1ui                    :: inline proc "c" (index: u32, x: u32)                                                                                                     {        impl_VertexAttribI1ui(index, x);                                                                        }
	VertexAttribI2ui                    :: inline proc "c" (index: u32, x: u32, y: u32)                                                                                             {        impl_VertexAttribI2ui(index, x, y);                                                                     }
	VertexAttribI3ui                    :: inline proc "c" (index: u32, x: u32, y: u32, z: u32)                                                                                     {        impl_VertexAttribI3ui(index, x, y, z);                                                                  }
	VertexAttribI4ui                    :: inline proc "c" (index: u32, x: u32, y: u32, z: u32, w: u32)                                                                             {        impl_VertexAttribI4ui(index, x, y, z, w);                                                               }
	VertexAttribI1iv                    :: inline proc "c" (index: u32, v: ^i32)                                                                                                    {        impl_VertexAttribI1iv(index, v);                                                                        }
	VertexAttribI2iv                    :: inline proc "c" (index: u32, v: ^i32)                                                                                                    {        impl_VertexAttribI2iv(index, v);                                                                        }
	VertexAttribI3iv                    :: inline proc "c" (index: u32, v: ^i32)                                                                                                    {        impl_VertexAttribI3iv(index, v);                                                                        }
	VertexAttribI4iv                    :: inline proc "c" (index: u32, v: ^i32)                                                                                                    {        impl_VertexAttribI4iv(index, v);                                                                        }
	VertexAttribI1uiv                   :: inline proc "c" (index: u32, v: ^u32)                                                                                                    {        impl_VertexAttribI1uiv(index, v);                                                                       }
	VertexAttribI2uiv                   :: inline proc "c" (index: u32, v: ^u32)                                                                                                    {        impl_VertexAttribI2uiv(index, v);                                                                       }
	VertexAttribI3uiv                   :: inline proc "c" (index: u32, v: ^u32)                                                                                                    {        impl_VertexAttribI3uiv(index, v);                                                                       }
	VertexAttribI4uiv                   :: inline proc "c" (index: u32, v: ^u32)                                                                                                    {        impl_VertexAttribI4uiv(index, v);                                                                       }
	VertexAttribI4bv                    :: inline proc "c" (index: u32, v: ^i8)                                                                                                     {        impl_VertexAttribI4bv(index, v);                                                                        }
	VertexAttribI4sv                    :: inline proc "c" (index: u32, v: ^i16)                                                                                                    {        impl_VertexAttribI4sv(index, v);                                                                        }
	VertexAttribI4ubv                   :: inline proc "c" (index: u32, v: ^u8)                                                                                                     {        impl_VertexAttribI4ubv(index, v);                                                                       }
	VertexAttribI4usv                   :: inline proc "c" (index: u32, v: ^u16)                                                                                                    {        impl_VertexAttribI4usv(index, v);                                                                       }
	GetUniformuiv                       :: inline proc "c" (program: u32, location: i32, params: ^u32)                                                                              {        impl_GetUniformuiv(program, location, params);                                                          }
	BindFragDataLocation                :: inline proc "c" (program: u32, color: u32, name: ^u8)                                                                                    {        impl_BindFragDataLocation(program, color, name);                                                        }
	GetFragDataLocation                 :: inline proc "c" (program: u32, name: ^u8) -> i32                                                                                         { ret := impl_GetFragDataLocation(program, name);                                                    return ret; }
	Uniform1ui                          :: inline proc "c" (location: i32, v0: u32)                                                                                                 {        impl_Uniform1ui(location, v0);                                                                          }
	Uniform2ui                          :: inline proc "c" (location: i32, v0: u32, v1: u32)                                                                                        {        impl_Uniform2ui(location, v0, v1);                                                                      }
	Uniform3ui                          :: inline proc "c" (location: i32, v0: u32, v1: u32, v2: u32)                                                                               {        impl_Uniform3ui(location, v0, v1, v2);                                                                  }
	Uniform4ui                          :: inline proc "c" (location: i32, v0: u32, v1: u32, v2: u32, v3: u32)                                                                      {        impl_Uniform4ui(location, v0, v1, v2, v3);                                                              }
	Uniform1uiv                         :: inline proc "c" (location: i32, count: i32, value: ^u32)                                                                                 {        impl_Uniform1uiv(location, count, value);                                                               }
	Uniform2uiv                         :: inline proc "c" (location: i32, count: i32, value: ^u32)                                                                                 {        impl_Uniform2uiv(location, count, value);                                                               }
	Uniform3uiv                         :: inline proc "c" (location: i32, count: i32, value: ^u32)                                                                                 {        impl_Uniform3uiv(location, count, value);                                                               }
	Uniform4uiv                         :: inline proc "c" (location: i32, count: i32, value: ^u32)                                                                                 {        impl_Uniform4uiv(location, count, value);                                                               }
	TexParameterIiv                     :: inline proc "c" (target: u32, pname: u32, params: ^i32)                                                                                  {        impl_TexParameterIiv(target, pname, params);                                                            }
	TexParameterIuiv                    :: inline proc "c" (target: u32, pname: u32, params: ^u32)                                                                                  {        impl_TexParameterIuiv(target, pname, params);                                                           }
	GetTexParameterIiv                  :: inline proc "c" (target: u32, pname: u32, params: ^i32)                                                                                  {        impl_GetTexParameterIiv(target, pname, params);                                                         }
	GetTexParameterIuiv                 :: inline proc "c" (target: u32, pname: u32, params: ^u32)                                                                                  {        impl_GetTexParameterIuiv(target, pname, params);                                                        }
	ClearBufferiv                       :: inline proc "c" (buffer: u32, drawbuffer: i32, value: ^i32)                                                                              {        impl_ClearBufferiv(buffer, drawbuffer, value);                                                          }
	ClearBufferuiv                      :: inline proc "c" (buffer: u32, drawbuffer: i32, value: ^u32)                                                                              {        impl_ClearBufferuiv(buffer, drawbuffer, value);                                                         }
	ClearBufferfv                       :: inline proc "c" (buffer: u32, drawbuffer: i32, value: ^f32)                                                                              {        impl_ClearBufferfv(buffer, drawbuffer, value);                                                          }
	ClearBufferfi                       :: inline proc "c" (buffer: u32, drawbuffer: i32, depth: f32, stencil: i32) -> rawptr                                                       { ret := impl_ClearBufferfi(buffer, drawbuffer, depth, stencil);                                     return ret; }
	GetStringi                          :: inline proc "c" (name: u32, index: u32) -> u8                                                                                            { ret := impl_GetStringi(name, index);                                                               return ret; }
	IsRenderbuffer                      :: inline proc "c" (renderbuffer: u32) -> u8                                                                                                { ret := impl_IsRenderbuffer(renderbuffer);                                                          return ret; }
	BindRenderbuffer                    :: inline proc "c" (target: u32, renderbuffer: u32)                                                                                         {        impl_BindRenderbuffer(target, renderbuffer);                                                            }
	DeleteRenderbuffers                 :: inline proc "c" (n: i32, renderbuffers: ^u32)                                                                                            {        impl_DeleteRenderbuffers(n, renderbuffers);                                                             }
	GenRenderbuffers                    :: inline proc "c" (n: i32, renderbuffers: ^u32)                                                                                            {        impl_GenRenderbuffers(n, renderbuffers);                                                                }
	RenderbufferStorage                 :: inline proc "c" (target: u32, internalformat: u32, width: i32, height: i32)                                                              {        impl_RenderbufferStorage(target, internalformat, width, height);                                        }
	GetRenderbufferParameteriv          :: inline proc "c" (target: u32, pname: u32, params: ^i32)                                                                                  {        impl_GetRenderbufferParameteriv(target, pname, params);                                                 }
	IsFramebuffer                       :: inline proc "c" (framebuffer: u32) -> u8                                                                                                 { ret := impl_IsFramebuffer(framebuffer);                                                            return ret; }
	BindFramebuffer                     :: inline proc "c" (target: u32, framebuffer: u32)                                                                                          {        impl_BindFramebuffer(target, framebuffer);                                                              }
	DeleteFramebuffers                  :: inline proc "c" (n: i32, framebuffers: ^u32)                                                                                             {        impl_DeleteFramebuffers(n, framebuffers);                                                               }
	GenFramebuffers                     :: inline proc "c" (n: i32, framebuffers: ^u32)                                                                                             {        impl_GenFramebuffers(n, framebuffers);                                                                  }
	CheckFramebufferStatus              :: inline proc "c" (target: u32) -> u32                                                                                                     { ret := impl_CheckFramebufferStatus(target);                                                        return ret; }
	FramebufferTexture1D                :: inline proc "c" (target: u32, attachment: u32, textarget: u32, texture: u32, level: i32)                                                 {        impl_FramebufferTexture1D(target, attachment, textarget, texture, level);                               }
	FramebufferTexture2D                :: inline proc "c" (target: u32, attachment: u32, textarget: u32, texture: u32, level: i32)                                                 {        impl_FramebufferTexture2D(target, attachment, textarget, texture, level);                               }
	FramebufferTexture3D                :: inline proc "c" (target: u32, attachment: u32, textarget: u32, texture: u32, level: i32, zoffset: i32)                                   {        impl_FramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);                      }
	FramebufferRenderbuffer             :: inline proc "c" (target: u32, attachment: u32, renderbuffertarget: u32, renderbuffer: u32)                                               {        impl_FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);                     }
	GetFramebufferAttachmentParameteriv :: inline proc "c" (target: u32, attachment: u32, pname: u32, params: ^i32)                                                                 {        impl_GetFramebufferAttachmentParameteriv(target, attachment, pname, params);                            }
	GenerateMipmap                      :: inline proc "c" (target: u32)                                                                                                            {        impl_GenerateMipmap(target);                                                                            }
	BlitFramebuffer                     :: inline proc "c" (srcX0: i32, srcY0: i32, srcX1: i32, srcY1: i32, dstX0: i32, dstY0: i32, dstX1: i32, dstY1: i32, mask: u32, filter: u32) {        impl_BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);             }
	RenderbufferStorageMultisample      :: inline proc "c" (target: u32, samples: i32, internalformat: u32, width: i32, height: i32)                                                {        impl_RenderbufferStorageMultisample(target, samples, internalformat, width, height);                    }
	FramebufferTextureLayer             :: inline proc "c" (target: u32, attachment: u32, texture: u32, level: i32, layer: i32)                                                     {        impl_FramebufferTextureLayer(target, attachment, texture, level, layer);                                }
	MapBufferRange                      :: inline proc "c" (target: u32, offset: int, length: int, access: u32) -> rawptr                                                           { ret := impl_MapBufferRange(target, offset, length, access);                                        return ret; }
	FlushMappedBufferRange              :: inline proc "c" (target: u32, offset: int, length: int)                                                                                  {        impl_FlushMappedBufferRange(target, offset, length);                                                    }
	BindVertexArray                     :: inline proc "c" (array: u32)                                                                                                             {        impl_BindVertexArray(array);                                                                            }
	DeleteVertexArrays                  :: inline proc "c" (n: i32, arrays: ^u32)                                                                                                   {        impl_DeleteVertexArrays(n, arrays);                                                                     }
	GenVertexArrays                     :: inline proc "c" (n: i32, arrays: ^u32)                                                                                                   {        impl_GenVertexArrays(n, arrays);                                                                        }
	IsVertexArray                       :: inline proc "c" (array: u32) -> u8                                                                                                       { ret := impl_IsVertexArray(array);                                                                  return ret; }

	// VERSION_3_1
	DrawArraysInstanced       :: inline proc "c" (mode: u32, first: i32, count: i32, instancecount: i32)                                   {        impl_DrawArraysInstanced(mode, first, count, instancecount);                                               }
	DrawElementsInstanced     :: inline proc "c" (mode: u32, count: i32, type_: u32, indices: rawptr, instancecount: i32)                  {        impl_DrawElementsInstanced(mode, count, type_, indices, instancecount);                                    }
	TexBuffer                 :: inline proc "c" (target: u32, internalformat: u32, buffer: u32)                                           {        impl_TexBuffer(target, internalformat, buffer);                                                            }
	PrimitiveRestartIndex     :: inline proc "c" (index: u32)                                                                              {        impl_PrimitiveRestartIndex(index);                                                                         }
	CopyBufferSubData         :: inline proc "c" (readTarget: u32, writeTarget: u32, readOffset: int, writeOffset: int, size: int)         {        impl_CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);                            }
	GetUniformIndices         :: inline proc "c" (program: u32, uniformCount: i32, uniformNames: ^u8, uniformIndices: ^u32)                {        impl_GetUniformIndices(program, uniformCount, uniformNames, uniformIndices);                               }
	GetActiveUniformsiv       :: inline proc "c" (program: u32, uniformCount: i32, uniformIndices: ^u32, pname: u32, params: ^i32)         {        impl_GetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);                            }
	GetActiveUniformName      :: inline proc "c" (program: u32, uniformIndex: u32, bufSize: i32, length: ^i32, uniformName: ^u8)           {        impl_GetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);                            }
	GetUniformBlockIndex      :: inline proc "c" (program: u32, uniformBlockName: ^u8) -> u32                                              { ret := impl_GetUniformBlockIndex(program, uniformBlockName);                                          return ret; }
	GetActiveUniformBlockiv   :: inline proc "c" (program: u32, uniformBlockIndex: u32, pname: u32, params: ^i32)                          {        impl_GetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);                                   }
	GetActiveUniformBlockName :: inline proc "c" (program: u32, uniformBlockIndex: u32, bufSize: i32, length: ^i32, uniformBlockName: ^u8) {        impl_GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);             }
	UniformBlockBinding       :: inline proc "c" (program: u32, uniformBlockIndex: u32, uniformBlockBinding: u32)                          {        impl_UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);                                 }

	// VERSION_3_2
	DrawElementsBaseVertex          :: inline proc "c" (mode: u32, count: i32, type_: u32, indices: rawptr, basevertex: i32)                                           {        impl_DrawElementsBaseVertex(mode, count, type_, indices, basevertex);                                                }
	DrawRangeElementsBaseVertex     :: inline proc "c" (mode: u32, start: u32, end: u32, count: i32, type_: u32, indices: rawptr, basevertex: i32)                     {        impl_DrawRangeElementsBaseVertex(mode, start, end, count, type_, indices, basevertex);                               }
	DrawElementsInstancedBaseVertex :: inline proc "c" (mode: u32, count: i32, type_: u32, indices: rawptr, instancecount: i32, basevertex: i32)                       {        impl_DrawElementsInstancedBaseVertex(mode, count, type_, indices, instancecount, basevertex);                        }
	MultiDrawElementsBaseVertex     :: inline proc "c" (mode: u32, count: ^i32, type_: u32, indices: ^rawptr, drawcount: i32, basevertex: ^i32)                        {        impl_MultiDrawElementsBaseVertex(mode, count, type_, indices, drawcount, basevertex);                                }
	ProvokingVertex                 :: inline proc "c" (mode: u32)                                                                                                     {        impl_ProvokingVertex(mode);                                                                                          }
	FenceSync                       :: inline proc "c" (condition: u32, flags: u32) -> sync_t                                                                          { ret := impl_FenceSync(condition, flags);                                                                        return ret; }
	IsSync                          :: inline proc "c" (sync: sync_t) -> u8                                                                                            { ret := impl_IsSync(sync);                                                                                       return ret; }
	DeleteSync                      :: inline proc "c" (sync: sync_t)                                                                                                  {        impl_DeleteSync(sync);                                                                                               }
	ClientWaitSync                  :: inline proc "c" (sync: sync_t, flags: u32, timeout: u64) -> u32                                                                 { ret := impl_ClientWaitSync(sync, flags, timeout);                                                               return ret; }
	WaitSync                        :: inline proc "c" (sync: sync_t, flags: u32, timeout: u64)                                                                        {        impl_WaitSync(sync, flags, timeout);                                                                                 }
	GetInteger64v                   :: inline proc "c" (pname: u32, data: ^i64)                                                                                        {        impl_GetInteger64v(pname, data);                                                                                     }
	GetSynciv                       :: inline proc "c" (sync: sync_t, pname: u32, bufSize: i32, length: ^i32, values: ^i32)                                            {        impl_GetSynciv(sync, pname, bufSize, length, values);                                                                }
	GetInteger64i_v                 :: inline proc "c" (target: u32, index: u32, data: ^i64)                                                                           {        impl_GetInteger64i_v(target, index, data);                                                                           }
	GetBufferParameteri64v          :: inline proc "c" (target: u32, pname: u32, params: ^i64)                                                                         {        impl_GetBufferParameteri64v(target, pname, params);                                                                  }
	FramebufferTexture              :: inline proc "c" (target: u32, attachment: u32, texture: u32, level: i32)                                                        {        impl_FramebufferTexture(target, attachment, texture, level);                                                         }
	TexImage2DMultisample           :: inline proc "c" (target: u32, samples: i32, internalformat: u32, width: i32, height: i32, fixedsamplelocations: u8)             {        impl_TexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);                    }
	TexImage3DMultisample           :: inline proc "c" (target: u32, samples: i32, internalformat: u32, width: i32, height: i32, depth: i32, fixedsamplelocations: u8) {        impl_TexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);             }
	GetMultisamplefv                :: inline proc "c" (pname: u32, index: u32, val: ^f32)                                                                             {        impl_GetMultisamplefv(pname, index, val);                                                                            }
	SampleMaski                     :: inline proc "c" (maskNumber: u32, mask: u32)                                                                                    {        impl_SampleMaski(maskNumber, mask);                                                                                  }

	// VERSION_3_3
	BindFragDataLocationIndexed :: inline proc "c" (program: u32, colorNumber: u32, index: u32, name: ^u8) {        impl_BindFragDataLocationIndexed(program, colorNumber, index, name);             }
	GetFragDataIndex            :: inline proc "c" (program: u32, name: ^u8) -> i32                        { ret := impl_GetFragDataIndex(program, name);                                return ret; }
	GenSamplers                 :: inline proc "c" (count: i32, samplers: ^u32)                            {        impl_GenSamplers(count, samplers);                                               }
	DeleteSamplers              :: inline proc "c" (count: i32, samplers: ^u32)                            {        impl_DeleteSamplers(count, samplers);                                            }
	IsSampler                   :: inline proc "c" (sampler: u32) -> u8                                    { ret := impl_IsSampler(sampler);                                             return ret; }
	BindSampler                 :: inline proc "c" (unit: u32, sampler: u32)                               {        impl_BindSampler(unit, sampler);                                                 }
	SamplerParameteri           :: inline proc "c" (sampler: u32, pname: u32, param: i32)                  {        impl_SamplerParameteri(sampler, pname, param);                                   }
	SamplerParameteriv          :: inline proc "c" (sampler: u32, pname: u32, param: ^i32)                 {        impl_SamplerParameteriv(sampler, pname, param);                                  }
	SamplerParameterf           :: inline proc "c" (sampler: u32, pname: u32, param: f32)                  {        impl_SamplerParameterf(sampler, pname, param);                                   }
	SamplerParameterfv          :: inline proc "c" (sampler: u32, pname: u32, param: ^f32)                 {        impl_SamplerParameterfv(sampler, pname, param);                                  }
	SamplerParameterIiv         :: inline proc "c" (sampler: u32, pname: u32, param: ^i32)                 {        impl_SamplerParameterIiv(sampler, pname, param);                                 }
	SamplerParameterIuiv        :: inline proc "c" (sampler: u32, pname: u32, param: ^u32)                 {        impl_SamplerParameterIuiv(sampler, pname, param);                                }
	GetSamplerParameteriv       :: inline proc "c" (sampler: u32, pname: u32, params: ^i32)                {        impl_GetSamplerParameteriv(sampler, pname, params);                              }
	GetSamplerParameterIiv      :: inline proc "c" (sampler: u32, pname: u32, params: ^i32)                {        impl_GetSamplerParameterIiv(sampler, pname, params);                             }
	GetSamplerParameterfv       :: inline proc "c" (sampler: u32, pname: u32, params: ^f32)                {        impl_GetSamplerParameterfv(sampler, pname, params);                              }
	GetSamplerParameterIuiv     :: inline proc "c" (sampler: u32, pname: u32, params: ^u32)                {        impl_GetSamplerParameterIuiv(sampler, pname, params);                            }
	QueryCounter                :: inline proc "c" (id: u32, target: u32)                                  {        impl_QueryCounter(id, target);                                                   }
	GetQueryObjecti64v          :: inline proc "c" (id: u32, pname: u32, params: ^i64)                     {        impl_GetQueryObjecti64v(id, pname, params);                                      }
	GetQueryObjectui64v         :: inline proc "c" (id: u32, pname: u32, params: ^u64)                     {        impl_GetQueryObjectui64v(id, pname, params);                                     }
	VertexAttribDivisor         :: inline proc "c" (index: u32, divisor: u32)                              {        impl_VertexAttribDivisor(index, divisor);                                        }
	VertexAttribP1ui            :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: u32)    {        impl_VertexAttribP1ui(index, type_, normalized, value);                          }
	VertexAttribP1uiv           :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: ^u32)   {        impl_VertexAttribP1uiv(index, type_, normalized, value);                         }
	VertexAttribP2ui            :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: u32)    {        impl_VertexAttribP2ui(index, type_, normalized, value);                          }
	VertexAttribP2uiv           :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: ^u32)   {        impl_VertexAttribP2uiv(index, type_, normalized, value);                         }
	VertexAttribP3ui            :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: u32)    {        impl_VertexAttribP3ui(index, type_, normalized, value);                          }
	VertexAttribP3uiv           :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: ^u32)   {        impl_VertexAttribP3uiv(index, type_, normalized, value);                         }
	VertexAttribP4ui            :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: u32)    {        impl_VertexAttribP4ui(index, type_, normalized, value);                          }
	VertexAttribP4uiv           :: inline proc "c" (index: u32, type_: u32, normalized: u8, value: ^u32)   {        impl_VertexAttribP4uiv(index, type_, normalized, value);                         }
	VertexP2ui                  :: inline proc "c" (type_: u32, value: u32)                                {        impl_VertexP2ui(type_, value);                                                   }
	VertexP2uiv                 :: inline proc "c" (type_: u32, value: ^u32)                               {        impl_VertexP2uiv(type_, value);                                                  }
	VertexP3ui                  :: inline proc "c" (type_: u32, value: u32)                                {        impl_VertexP3ui(type_, value);                                                   }
	VertexP3uiv                 :: inline proc "c" (type_: u32, value: ^u32)                               {        impl_VertexP3uiv(type_, value);                                                  }
	VertexP4ui                  :: inline proc "c" (type_: u32, value: u32)                                {        impl_VertexP4ui(type_, value);                                                   }
	VertexP4uiv                 :: inline proc "c" (type_: u32, value: ^u32)                               {        impl_VertexP4uiv(type_, value);                                                  }
	TexCoordP1ui                :: inline proc "c" (type_: u32, coords: u32)                               {        impl_TexCoordP1ui(type_, coords);                                                }
	TexCoordP1uiv               :: inline proc "c" (type_: u32, coords: ^u32)                              {        impl_TexCoordP1uiv(type_, coords);                                               }
	TexCoordP2ui                :: inline proc "c" (type_: u32, coords: u32)                               {        impl_TexCoordP2ui(type_, coords);                                                }
	TexCoordP2uiv               :: inline proc "c" (type_: u32, coords: ^u32)                              {        impl_TexCoordP2uiv(type_, coords);                                               }
	TexCoordP3ui                :: inline proc "c" (type_: u32, coords: u32)                               {        impl_TexCoordP3ui(type_, coords);                                                }
	TexCoordP3uiv               :: inline proc "c" (type_: u32, coords: ^u32)                              {        impl_TexCoordP3uiv(type_, coords);                                               }
	TexCoordP4ui                :: inline proc "c" (type_: u32, coords: u32)                               {        impl_TexCoordP4ui(type_, coords);                                                }
	TexCoordP4uiv               :: inline proc "c" (type_: u32, coords: ^u32)                              {        impl_TexCoordP4uiv(type_, coords);                                               }
	MultiTexCoordP1ui           :: inline proc "c" (texture: u32, type_: u32, coords: u32)                 {        impl_MultiTexCoordP1ui(texture, type_, coords);                                  }
	MultiTexCoordP1uiv          :: inline proc "c" (texture: u32, type_: u32, coords: ^u32)                {        impl_MultiTexCoordP1uiv(texture, type_, coords);                                 }
	MultiTexCoordP2ui           :: inline proc "c" (texture: u32, type_: u32, coords: u32)                 {        impl_MultiTexCoordP2ui(texture, type_, coords);                                  }
	MultiTexCoordP2uiv          :: inline proc "c" (texture: u32, type_: u32, coords: ^u32)                {        impl_MultiTexCoordP2uiv(texture, type_, coords);                                 }
	MultiTexCoordP3ui           :: inline proc "c" (texture: u32, type_: u32, coords: u32)                 {        impl_MultiTexCoordP3ui(texture, type_, coords);                                  }
	MultiTexCoordP3uiv          :: inline proc "c" (texture: u32, type_: u32, coords: ^u32)                {        impl_MultiTexCoordP3uiv(texture, type_, coords);                                 }
	MultiTexCoordP4ui           :: inline proc "c" (texture: u32, type_: u32, coords: u32)                 {        impl_MultiTexCoordP4ui(texture, type_, coords);                                  }
	MultiTexCoordP4uiv          :: inline proc "c" (texture: u32, type_: u32, coords: ^u32)                {        impl_MultiTexCoordP4uiv(texture, type_, coords);                                 }
	NormalP3ui                  :: inline proc "c" (type_: u32, coords: u32)                               {        impl_NormalP3ui(type_, coords);                                                  }
	NormalP3uiv                 :: inline proc "c" (type_: u32, coords: ^u32)                              {        impl_NormalP3uiv(type_, coords);                                                 }
	ColorP3ui                   :: inline proc "c" (type_: u32, color: u32)                                {        impl_ColorP3ui(type_, color);                                                    }
	ColorP3uiv                  :: inline proc "c" (type_: u32, color: ^u32)                               {        impl_ColorP3uiv(type_, color);                                                   }
	ColorP4ui                   :: inline proc "c" (type_: u32, color: u32)                                {        impl_ColorP4ui(type_, color);                                                    }
	ColorP4uiv                  :: inline proc "c" (type_: u32, color: ^u32)                               {        impl_ColorP4uiv(type_, color);                                                   }
	SecondaryColorP3ui          :: inline proc "c" (type_: u32, color: u32)                                {        impl_SecondaryColorP3ui(type_, color);                                           }
	SecondaryColorP3uiv         :: inline proc "c" (type_: u32, color: ^u32)                               {        impl_SecondaryColorP3uiv(type_, color);                                          }

	// VERSION_4_0
	MinSampleShading               :: inline proc "c" (value: f32)                                                                        {        impl_MinSampleShading(value);                                                                        }
	BlendEquationi                 :: inline proc "c" (buf: u32, mode: u32)                                                               {        impl_BlendEquationi(buf, mode);                                                                      }
	BlendEquationSeparatei         :: inline proc "c" (buf: u32, modeRGB: u32, modeAlpha: u32)                                            {        impl_BlendEquationSeparatei(buf, modeRGB, modeAlpha);                                                }
	BlendFunci                     :: inline proc "c" (buf: u32, src: u32, dst: u32)                                                      {        impl_BlendFunci(buf, src, dst);                                                                      }
	BlendFuncSeparatei             :: inline proc "c" (buf: u32, srcRGB: u32, dstRGB: u32, srcAlpha: u32, dstAlpha: u32)                  {        impl_BlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);                                    }
	DrawArraysIndirect             :: inline proc "c" (mode: u32, indirect: rawptr)                                                       {        impl_DrawArraysIndirect(mode, indirect);                                                             }
	DrawElementsIndirect           :: inline proc "c" (mode: u32, type_: u32, indirect: rawptr)                                           {        impl_DrawElementsIndirect(mode, type_, indirect);                                                    }
	Uniform1d                      :: inline proc "c" (location: i32, x: f64)                                                             {        impl_Uniform1d(location, x);                                                                         }
	Uniform2d                      :: inline proc "c" (location: i32, x: f64, y: f64)                                                     {        impl_Uniform2d(location, x, y);                                                                      }
	Uniform3d                      :: inline proc "c" (location: i32, x: f64, y: f64, z: f64)                                             {        impl_Uniform3d(location, x, y, z);                                                                   }
	Uniform4d                      :: inline proc "c" (location: i32, x: f64, y: f64, z: f64, w: f64)                                     {        impl_Uniform4d(location, x, y, z, w);                                                                }
	Uniform1dv                     :: inline proc "c" (location: i32, count: i32, value: ^f64)                                            {        impl_Uniform1dv(location, count, value);                                                             }
	Uniform2dv                     :: inline proc "c" (location: i32, count: i32, value: ^f64)                                            {        impl_Uniform2dv(location, count, value);                                                             }
	Uniform3dv                     :: inline proc "c" (location: i32, count: i32, value: ^f64)                                            {        impl_Uniform3dv(location, count, value);                                                             }
	Uniform4dv                     :: inline proc "c" (location: i32, count: i32, value: ^f64)                                            {        impl_Uniform4dv(location, count, value);                                                             }
	UniformMatrix2dv               :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64)                             {        impl_UniformMatrix2dv(location, count, transpose, value);                                            }
	UniformMatrix3dv               :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64)                             {        impl_UniformMatrix3dv(location, count, transpose, value);                                            }
	UniformMatrix4dv               :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64)                             {        impl_UniformMatrix4dv(location, count, transpose, value);                                            }
	UniformMatrix2x3dv             :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64)                             {        impl_UniformMatrix2x3dv(location, count, transpose, value);                                          }
	UniformMatrix2x4dv             :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64)                             {        impl_UniformMatrix2x4dv(location, count, transpose, value);                                          }
	UniformMatrix3x2dv             :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64)                             {        impl_UniformMatrix3x2dv(location, count, transpose, value);                                          }
	UniformMatrix3x4dv             :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64)                             {        impl_UniformMatrix3x4dv(location, count, transpose, value);                                          }
	UniformMatrix4x2dv             :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64)                             {        impl_UniformMatrix4x2dv(location, count, transpose, value);                                          }
	UniformMatrix4x3dv             :: inline proc "c" (location: i32, count: i32, transpose: u8, value: ^f64)                             {        impl_UniformMatrix4x3dv(location, count, transpose, value);                                          }
	GetUniformdv                   :: inline proc "c" (program: u32, location: i32, params: ^f64)                                         {        impl_GetUniformdv(program, location, params);                                                        }
	GetSubroutineUniformLocation   :: inline proc "c" (program: u32, shadertype_: u32, name: ^u8) -> i32                                  { ret := impl_GetSubroutineUniformLocation(program, shadertype_, name);                           return ret; }
	GetSubroutineIndex             :: inline proc "c" (program: u32, shadertype_: u32, name: ^u8) -> u32                                  { ret := impl_GetSubroutineIndex(program, shadertype_, name);                                     return ret; }
	GetActiveSubroutineUniformiv   :: inline proc "c" (program: u32, shadertype_: u32, index: u32, pname: u32, values: ^i32)              {        impl_GetActiveSubroutineUniformiv(program, shadertype_, index, pname, values);                       }
	GetActiveSubroutineUniformName :: inline proc "c" (program: u32, shadertype_: u32, index: u32, bufsize: i32, length: ^i32, name: ^u8) {        impl_GetActiveSubroutineUniformName(program, shadertype_, index, bufsize, length, name);             }
	GetActiveSubroutineName        :: inline proc "c" (program: u32, shadertype_: u32, index: u32, bufsize: i32, length: ^i32, name: ^u8) {        impl_GetActiveSubroutineName(program, shadertype_, index, bufsize, length, name);                    }
	UniformSubroutinesuiv          :: inline proc "c" (shadertype_: u32, count: i32, indices: ^u32)                                       {        impl_UniformSubroutinesuiv(shadertype_, count, indices);                                             }
	GetUniformSubroutineuiv        :: inline proc "c" (shadertype_: u32, location: i32, params: ^u32)                                     {        impl_GetUniformSubroutineuiv(shadertype_, location, params);                                         }
	GetProgramStageiv              :: inline proc "c" (program: u32, shadertype_: u32, pname: u32, values: ^i32)                          {        impl_GetProgramStageiv(program, shadertype_, pname, values);                                         }
	PatchParameteri                :: inline proc "c" (pname: u32, value: i32)                                                            {        impl_PatchParameteri(pname, value);                                                                  }
	PatchParameterfv               :: inline proc "c" (pname: u32, values: ^f32)                                                          {        impl_PatchParameterfv(pname, values);                                                                }
	BindTransformFeedback          :: inline proc "c" (target: u32, id: u32)                                                              {        impl_BindTransformFeedback(target, id);                                                              }
	DeleteTransformFeedbacks       :: inline proc "c" (n: i32, ids: ^u32)                                                                 {        impl_DeleteTransformFeedbacks(n, ids);                                                               }
	GenTransformFeedbacks          :: inline proc "c" (n: i32, ids: ^u32)                                                                 {        impl_GenTransformFeedbacks(n, ids);                                                                  }
	IsTransformFeedback            :: inline proc "c" (id: u32) -> u8                                                                     { ret := impl_IsTransformFeedback(id);                                                            return ret; }
	PauseTransformFeedback         :: inline proc "c" ()                                                                                  {        impl_PauseTransformFeedback();                                                                       }
	ResumeTransformFeedback        :: inline proc "c" ()                                                                                  {        impl_ResumeTransformFeedback();                                                                      }
	DrawTransformFeedback          :: inline proc "c" (mode: u32, id: u32)                                                                {        impl_DrawTransformFeedback(mode, id);                                                                }
	DrawTransformFeedbackStream    :: inline proc "c" (mode: u32, id: u32, stream: u32)                                                   {        impl_DrawTransformFeedbackStream(mode, id, stream);                                                  }
	BeginQueryIndexed              :: inline proc "c" (target: u32, index: u32, id: u32)                                                  {        impl_BeginQueryIndexed(target, index, id);                                                           }
	EndQueryIndexed                :: inline proc "c" (target: u32, index: u32)                                                           {        impl_EndQueryIndexed(target, index);                                                                 }
	GetQueryIndexediv              :: inline proc "c" (target: u32, index: u32, pname: u32, params: ^i32)                                 {        impl_GetQueryIndexediv(target, index, pname, params);                                                }
}
