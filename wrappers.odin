package gl 

import "core:fmt"


when ODIN_DEBUG {
	import "core:runtime"
	debug_helper :: inline proc(from_loc: runtime.Source_Code_Location, num_ret: int, args: ..any, loc := #caller_location) {
		Error_Enum :: enum {
			NO_ERROR = NO_ERROR,
			INVALID_VALUE = INVALID_VALUE,
			INVALID_ENUM = INVALID_ENUM,
			INVALID_OPERATION = INVALID_OPERATION,
			INVALID_FRAMEBUFFER_OPERATION = INVALID_FRAMEBUFFER_OPERATION,
			OUT_OF_MEMORY = OUT_OF_MEMORY,
			STACK_UNDERFLOW = STACK_UNDERFLOW,
			STACK_OVERFLOW = STACK_OVERFLOW,
		}

		for {
			err := cast(Error_Enum)impl_GetError();
			if err == .NO_ERROR do break;

			fmt.printf("glGetError() returned %v\n", err);
		    
			// function call
		    fmt.printf("   call: gl%s(", loc.procedure);
	    	
	    	{
			    // input arguments
			    for arg, i in args[num_ret:] {
			    	if i > 0 do fmt.printf(", ");
			    	
			    	if v, ok := arg.(u32); ok {
			    		if err == .INVALID_ENUM {
			    			fmt.printf("INVALID_ENUM=%d", v);
		    			} else {
			    			fmt.printf("GL_%v=%d", GL_Enum(v), v);
		    			}
			    	} else {
			    		fmt.printf("%v", arg);
			    	}
			    }

			    // return arguments
			    if num_ret == 1 {
			    	fmt.printf(") -> %v \n", args[0]);
				} else if num_ret > 1 {
			    	fmt.printf(") -> (");
					for arg, i in args[1:num_ret] {
						if i > 0 do fmt.printf(", ");
						fmt.printf("%v", arg);
					}
					fmt.printf(")\n");
				} else {
				    fmt.printf(")\n");
				}
	    	}

			// location
		    fmt.printf("   in:   %s(%d:%d)\n", from_loc.file_path, from_loc.line, from_loc.column);
		}
	}

	CullFace               :: inline proc "c" (mode: u32, loc := #caller_location)                                                                                         {        impl_CullFace(mode);                                                                         debug_helper(loc, 0, mode);                                                                                   }
	FrontFace              :: inline proc "c" (mode: u32, loc := #caller_location)                                                                                         {        impl_FrontFace(mode);                                                                        debug_helper(loc, 0, mode);                                                                                   }
	Hint                   :: inline proc "c" (target, mode: u32, loc := #caller_location)                                                                                 {        impl_Hint(target, mode);                                                                     debug_helper(loc, 0, target, mode);                                                                           }
	LineWidth              :: inline proc "c" (width: f32, loc := #caller_location)                                                                                        {        impl_LineWidth(width);                                                                       debug_helper(loc, 0, width);                                                                                  }
	PointSize              :: inline proc "c" (size: f32, loc := #caller_location)                                                                                         {        impl_PointSize(size);                                                                        debug_helper(loc, 0, size);                                                                                   }
	PolygonMode            :: inline proc "c" (face, mode: u32, loc := #caller_location)                                                                                   {        impl_PolygonMode(face, mode);                                                                debug_helper(loc, 0, face, mode);                                                                             }
	Scissor                :: inline proc "c" (x, y, width, height: i32, loc := #caller_location)                                                                          {        impl_Scissor(x, y, width, height);                                                           debug_helper(loc, 0, x, y, width, height);                                                                    }
	TexParameterf          :: inline proc "c" (target, pname: u32, param: f32, loc := #caller_location)                                                                    {        impl_TexParameterf(target, pname, param);                                                    debug_helper(loc, 0, target, pname, param);                                                                   }
	TexParameterfv         :: inline proc "c" (target, pname: u32, params: ^f32, loc := #caller_location)                                                                  {        impl_TexParameterfv(target, pname, params);                                                  debug_helper(loc, 0, target, pname, params);                                                                  }
	TexParameteri          :: inline proc "c" (target, pname: u32, param: i32, loc := #caller_location)                                                                    {        impl_TexParameteri(target, pname, param);                                                    debug_helper(loc, 0, target, pname, param);                                                                   }
	TexParameteriv         :: inline proc "c" (target, pname: u32, params: ^i32, loc := #caller_location)                                                                  {        impl_TexParameteriv(target, pname, params);                                                  debug_helper(loc, 0, target, pname, params);                                                                  }
	TexImage1D             :: inline proc "c" (target: u32, level, internalformat, width, border: i32, format, type: u32, pixels: rawptr, loc := #caller_location)         {        impl_TexImage1D(target, level, internalformat, width, border, format, type, pixels);         debug_helper(loc, 0, target, level, internalformat, width, border, format, type, pixels);                     }
	TexImage2D             :: inline proc "c" (target: u32, level, internalformat, width, height, border: i32, format, type: u32, pixels: rawptr, loc := #caller_location) {        impl_TexImage2D(target, level, internalformat, width, height, border, format, type, pixels); debug_helper(loc, 0, target, level, internalformat, width, height, border, format, type, pixels);             }
	DrawBuffer             :: inline proc "c" (buf: u32, loc := #caller_location)                                                                                          {        impl_DrawBuffer(buf);                                                                        debug_helper(loc, 0, buf);                                                                                    }
	Clear                  :: inline proc "c" (mask: u32, loc := #caller_location)                                                                                         {        impl_Clear(mask);                                                                            debug_helper(loc, 0, mask);                                                                                   }
	ClearColor             :: inline proc "c" (red, green, blue, alpha: f32, loc := #caller_location)                                                                      {        impl_ClearColor(red, green, blue, alpha);                                                    debug_helper(loc, 0, red, green, blue, alpha);                                                                }
	ClearStencil           :: inline proc "c" (s: i32, loc := #caller_location)                                                                                            {        impl_ClearStencil(s);                                                                        debug_helper(loc, 0, s);                                                                                      }
	ClearDepth             :: inline proc "c" (depth: f64, loc := #caller_location)                                                                                        {        impl_ClearDepth(depth);                                                                      debug_helper(loc, 0, depth);                                                                                  }
	StencilMask            :: inline proc "c" (mask: u32, loc := #caller_location)                                                                                         {        impl_StencilMask(mask);                                                                      debug_helper(loc, 0, mask);                                                                                   }
	ColorMask              :: inline proc "c" (red, green, blue, alpha: u8, loc := #caller_location)                                                                       {        impl_ColorMask(red, green, blue, alpha);                                                     debug_helper(loc, 0, red, green, blue, alpha);                                                                }
	DepthMask              :: inline proc "c" (flag: u8, loc := #caller_location)                                                                                          {        impl_DepthMask(flag);                                                                        debug_helper(loc, 0, flag);                                                                                   }
	Disable                :: inline proc "c" (cap: u32, loc := #caller_location)                                                                                          {        impl_Disable(cap);                                                                           debug_helper(loc, 0, cap);                                                                                    }
	Enable                 :: inline proc "c" (cap: u32, loc := #caller_location)                                                                                          {        impl_Enable(cap);                                                                            debug_helper(loc, 0, cap);                                                                                    }
	Finish                 :: inline proc "c" (loc := #caller_location)                                                                                                    {        impl_Finish();                                                                               debug_helper(loc, 0);                                                                                         }
	Flush                  :: inline proc "c" (loc := #caller_location)                                                                                                    {        impl_Flush();                                                                                debug_helper(loc, 0);                                                                                         }
	BlendFunc              :: inline proc "c" (sfactor, dfactor: u32, loc := #caller_location)                                                                             {        impl_BlendFunc(sfactor, dfactor);                                                            debug_helper(loc, 0, sfactor, dfactor);                                                                       }
	LogicOp                :: inline proc "c" (opcode: u32, loc := #caller_location)                                                                                       {        impl_LogicOp(opcode);                                                                        debug_helper(loc, 0, opcode);                                                                                 }
	StencilFunc            :: inline proc "c" (func: u32, ref: i32, mask: u32, loc := #caller_location)                                                                    {        impl_StencilFunc(func, ref, mask);                                                           debug_helper(loc, 0, func, ref, mask);                                                                        }
	StencilOp              :: inline proc "c" (fail, zfail, zpass: u32, loc := #caller_location)                                                                           {        impl_StencilOp(fail, zfail, zpass);                                                          debug_helper(loc, 0, fail, zfail, zpass);                                                                     }
	DepthFunc              :: inline proc "c" (func: u32, loc := #caller_location)                                                                                         {        impl_DepthFunc(func);                                                                        debug_helper(loc, 0, func);                                                                                   }
	PixelStoref            :: inline proc "c" (pname: u32, param: f32, loc := #caller_location)                                                                            {        impl_PixelStoref(pname, param);                                                              debug_helper(loc, 0, pname, param);                                                                           }
	PixelStorei            :: inline proc "c" (pname: u32, param: i32, loc := #caller_location)                                                                            {        impl_PixelStorei(pname, param);                                                              debug_helper(loc, 0, pname, param);                                                                           }
	ReadBuffer             :: inline proc "c" (src: u32, loc := #caller_location)                                                                                          {        impl_ReadBuffer(src);                                                                        debug_helper(loc, 0, src);                                                                                    }
	ReadPixels             :: inline proc "c" (x, y, width, height: i32, format, type: u32, pixels: rawptr, loc := #caller_location)                                       {        impl_ReadPixels(x, y, width, height, format, type, pixels);                                  debug_helper(loc, 0, x, y, width, height, format, type, pixels);                                              }
	GetBooleanv            :: inline proc "c" (pname: u32, data: ^u8, loc := #caller_location)                                                                             {        impl_GetBooleanv(pname, data);                                                               debug_helper(loc, 0, pname, data);                                                                            }
	GetDoublev             :: inline proc "c" (pname: u32, data: ^f64, loc := #caller_location)                                                                            {        impl_GetDoublev(pname, data);                                                                debug_helper(loc, 0, pname, data);                                                                            }
	GetError               :: inline proc "c" (loc := #caller_location) -> u32                                                                                             { ret := impl_GetError();                                                                             debug_helper(loc, 1, ret);                                                                        return ret; }
	GetFloatv              :: inline proc "c" (pname: u32, data: ^f32, loc := #caller_location)                                                                            {        impl_GetFloatv(pname, data);                                                                 debug_helper(loc, 0, pname, data);                                                                            }
	GetIntegerv            :: inline proc "c" (pname: u32, data: ^i32, loc := #caller_location)                                                                            {        impl_GetIntegerv(pname, data);                                                               debug_helper(loc, 0, pname, data);                                                                            }
	GetString              :: inline proc "c" (name: u32, loc := #caller_location) -> cstring                                                                              { ret := impl_GetString(name);                                                                        debug_helper(loc, 1, ret, name);                                                                  return ret; }
	GetTexImage            :: inline proc "c" (target: u32,  level: i32, format, type: u32, pixels: rawptr, loc := #caller_location)                                       {        impl_GetTexImage(target,  level, format, type, pixels);                                      debug_helper(loc, 0, target,  level, format, type, pixels);                                                   }
	GetTexParameterfv      :: inline proc "c" (target, pname: u32, params: ^f32, loc := #caller_location)                                                                  {        impl_GetTexParameterfv(target, pname, params);                                               debug_helper(loc, 0, target, pname, params);                                                                  }
	GetTexParameteriv      :: inline proc "c" (target, pname: u32, params: ^i32, loc := #caller_location)                                                                  {        impl_GetTexParameteriv(target, pname, params);                                               debug_helper(loc, 0, target, pname, params);                                                                  }
	GetTexLevelParameterfv :: inline proc "c" (target: u32, level: i32, pname: u32, params: ^f32, loc := #caller_location)                                                 {        impl_GetTexLevelParameterfv(target, level, pname, params);                                   debug_helper(loc, 0, target, level, pname, params);                                                           }
	GetTexLevelParameteriv :: inline proc "c" (target: u32, level: i32, pname: u32, params: ^i32, loc := #caller_location)                                                 {        impl_GetTexLevelParameteriv(target, level, pname, params);                                   debug_helper(loc, 0, target, level, pname, params);                                                           }
	IsEnabled              :: inline proc "c" (cap: u32, loc := #caller_location) -> u8                                                                                    { ret := impl_IsEnabled(cap);                                                                         debug_helper(loc, 1, ret, cap);                                                                   return ret; }
	DepthRange             :: inline proc "c" (near, far: f64, loc := #caller_location)                                                                                    {        impl_DepthRange(near, far);                                                                  debug_helper(loc, 0, near, far);                                                                              }
	Viewport               :: inline proc "c" (x, y, width, height: i32, loc := #caller_location)                                                                          {        impl_Viewport(x, y, width, height);                                                          debug_helper(loc, 0, x, y, width, height);                                                                    }

	// VERSION_1_1
	DrawArrays        :: inline proc "c" (mode: u32, first: i32, count: i32, loc := #caller_location)                                                                                    {        impl_DrawArrays(mode, first, count);                                                      debug_helper(loc, 0, mode, first, count);                                                               }
	DrawElements      :: inline proc "c" (mode: u32, count: i32, type: u32, indices: rawptr, loc := #caller_location)                                                                    {        impl_DrawElements(mode, count, type, indices);                                            debug_helper(loc, 0, mode, count, type, indices);                                                       }
	PolygonOffset     :: inline proc "c" (factor: f32, units: f32, loc := #caller_location)                                                                                              {        impl_PolygonOffset(factor, units);                                                        debug_helper(loc, 0, factor, units);                                                                    }
	CopyTexImage1D    :: inline proc "c" (target: u32, level: i32, internalformat: u32, x: i32, y: i32, width: i32, border: i32, loc := #caller_location)                                {        impl_CopyTexImage1D(target, level, internalformat, x, y, width, border);                  debug_helper(loc, 0, target, level, internalformat, x, y, width, border);                               }
	CopyTexImage2D    :: inline proc "c" (target: u32, level: i32, internalformat: u32, x: i32, y: i32, width: i32, height: i32, border: i32, loc := #caller_location)                   {        impl_CopyTexImage2D(target, level, internalformat, x, y, width, height, border);          debug_helper(loc, 0, target, level, internalformat, x, y, width, height, border);                       }
	CopyTexSubImage1D :: inline proc "c" (target: u32, level: i32, xoffset: i32, x: i32, y: i32, width: i32, loc := #caller_location)                                                    {        impl_CopyTexSubImage1D(target, level, xoffset, x, y, width);                              debug_helper(loc, 0, target, level, xoffset, x, y, width);                                              }
	CopyTexSubImage2D :: inline proc "c" (target: u32, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32, loc := #caller_location)                         {        impl_CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);             debug_helper(loc, 0, target, level, xoffset, yoffset, x, y, width, height);                             }
	TexSubImage1D     :: inline proc "c" (target: u32, level: i32, xoffset: i32, width: i32, format: u32, type: u32, pixels: rawptr, loc := #caller_location)                            {        impl_TexSubImage1D(target, level, xoffset, width, format, type, pixels);                  debug_helper(loc, 0, target, level, xoffset, width, format, type, pixels);                              }
	TexSubImage2D     :: inline proc "c" (target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, type: u32, pixels: rawptr, loc := #caller_location) {        impl_TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); debug_helper(loc, 0, target, level, xoffset, yoffset, width, height, format, type, pixels);             }
	BindTexture       :: inline proc "c" (target: u32, texture: u32, loc := #caller_location)                                                                                            {        impl_BindTexture(target, texture);                                                        debug_helper(loc, 0, target, texture);                                                                  }
	DeleteTextures    :: inline proc "c" (n: i32, textures: ^u32, loc := #caller_location)                                                                                               {        impl_DeleteTextures(n, textures);                                                         debug_helper(loc, 0, n, textures);                                                                      }
	GenTextures       :: inline proc "c" (n: i32, textures: ^u32, loc := #caller_location)                                                                                               {        impl_GenTextures(n, textures);                                                            debug_helper(loc, 0, n, textures);                                                                      }
	IsTexture         :: inline proc "c" (texture: u32, loc := #caller_location) -> u8                                                                                                   { ret := impl_IsTexture(texture);                                                                  debug_helper(loc, 1, ret, texture);                                                         return ret; }

	// VERSION_1_2
	DrawRangeElements :: inline proc "c" (mode, start, end: u32, count: i32, type: u32, indices: rawptr, loc := #caller_location)                                               { impl_DrawRangeElements(mode, start, end, count, type, indices);                                           debug_helper(loc, 0, mode, start, end, count, type, indices);                                               }
	TexImage3D        :: inline proc "c" (target: u32, level, internalformat, width, height, depth, border: i32, format, type: u32, pixels: rawptr, loc := #caller_location)    { impl_TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);       debug_helper(loc, 0, target, level, internalformat, width, height, depth, border, format, type, pixels);    }
	TexSubImage3D     :: inline proc "c" (target: u32, level, xoffset, yoffset, zoffset, width, height, depth: i32, format, type: u32, pixels: rawptr, loc := #caller_location) { impl_TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); debug_helper(loc, 0, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
	CopyTexSubImage3D :: inline proc "c" (target: u32, level, xoffset, yoffset, zoffset, x, y, width, height: i32, loc := #caller_location)                                     { impl_CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);                    debug_helper(loc, 0, target, level, xoffset, yoffset, zoffset, x, y, width, height);                        }
} else {
	// VERSION_1_0
	CullFace               :: inline proc "c" (mode: u32)                                                                                         {        impl_CullFace(mode);                                                                         }
	FrontFace              :: inline proc "c" (mode: u32)                                                                                         {        impl_FrontFace(mode);                                                                        }
	Hint                   :: inline proc "c" (target, mode: u32)                                                                                 {        impl_Hint(target, mode);                                                                     }
	LineWidth              :: inline proc "c" (width: f32)                                                                                        {        impl_LineWidth(width);                                                                       }
	PointSize              :: inline proc "c" (size: f32)                                                                                         {        impl_PointSize(size);                                                                        }
	PolygonMode            :: inline proc "c" (face, mode: u32)                                                                                   {        impl_PolygonMode(face, mode);                                                                }
	Scissor                :: inline proc "c" (x, y, width, height: i32)                                                                          {        impl_Scissor(x, y, width, height);                                                           }
	TexParameterf          :: inline proc "c" (target, pname: u32, param: f32)                                                                    {        impl_TexParameterf(target, pname, param);                                                    }
	TexParameterfv         :: inline proc "c" (target, pname: u32, params: ^f32)                                                                  {        impl_TexParameterfv(target, pname, params);                                                  }
	TexParameteri          :: inline proc "c" (target, pname: u32, param: i32)                                                                    {        impl_TexParameteri(target, pname, param);                                                    }
	TexParameteriv         :: inline proc "c" (target, pname: u32, params: ^i32)                                                                  {        impl_TexParameteriv(target, pname, params);                                                  }
	TexImage1D             :: inline proc "c" (target: u32, level, internalformat, width, border: i32, format, type: u32, pixels: rawptr)         {        impl_TexImage1D(target, level, internalformat, width, border, format, type, pixels);         }
	TexImage2D             :: inline proc "c" (target: u32, level, internalformat, width, height, border: i32, format, type: u32, pixels: rawptr) {        impl_TexImage2D(target, level, internalformat, width, height, border, format, type, pixels); }
	DrawBuffer             :: inline proc "c" (buf: u32)                                                                                          {        impl_DrawBuffer(buf);                                                                        }
	Clear                  :: inline proc "c" (mask: u32)                                                                                         {        impl_Clear(mask);                                                                            }
	ClearColor             :: inline proc "c" (red, green, blue, alpha: f32)                                                                      {        impl_ClearColor(red, green, blue, alpha);                                                    }
	ClearStencil           :: inline proc "c" (s: i32)                                                                                            {        impl_ClearStencil(s);                                                                        }
	ClearDepth             :: inline proc "c" (depth: f64)                                                                                        {        impl_ClearDepth(depth);                                                                      }
	StencilMask            :: inline proc "c" (mask: u32)                                                                                         {        impl_StencilMask(mask);                                                                      }
	ColorMask              :: inline proc "c" (red, green, blue, alpha: u8)                                                                       {        impl_ColorMask(red, green, blue, alpha);                                                     }
	DepthMask              :: inline proc "c" (flag: u8)                                                                                          {        impl_DepthMask(flag);                                                                        }
	Disable                :: inline proc "c" (cap: u32)                                                                                          {        impl_Disable(cap);                                                                           }
	Enable                 :: inline proc "c" (cap: u32)                                                                                          {        impl_Enable(cap);                                                                            }
	Finish                 :: inline proc "c" ()                                                                                                  {        impl_Finish();                                                                               }
	Flush                  :: inline proc "c" ()                                                                                                  {        impl_Flush();                                                                                }
	BlendFunc              :: inline proc "c" (sfactor, dfactor: u32)                                                                             {        impl_BlendFunc(sfactor, dfactor);                                                            }
	LogicOp                :: inline proc "c" (opcode: u32)                                                                                       {        impl_LogicOp(opcode);                                                                        }
	StencilFunc            :: inline proc "c" (func: u32, ref: i32, mask: u32)                                                                    {        impl_StencilFunc(func, ref, mask);                                                           }
	StencilOp              :: inline proc "c" (fail, zfail, zpass: u32)                                                                           {        impl_StencilOp(fail, zfail, zpass);                                                          }
	DepthFunc              :: inline proc "c" (func: u32)                                                                                         {        impl_DepthFunc(func);                                                                        }
	PixelStoref            :: inline proc "c" (pname: u32, param: f32)                                                                            {        impl_PixelStoref(pname, param);                                                              }
	PixelStorei            :: inline proc "c" (pname: u32, param: i32)                                                                            {        impl_PixelStorei(pname, param);                                                              }
	ReadBuffer             :: inline proc "c" (src: u32)                                                                                          {        impl_ReadBuffer(src);                                                                        }
	ReadPixels             :: inline proc "c" (x, y, width, height: i32, format, type: u32, pixels: rawptr)                                       {        impl_ReadPixels(x, y, width, height, format, type, pixels);                                  }
	GetBooleanv            :: inline proc "c" (pname: u32, data: ^u8)                                                                             {        impl_GetBooleanv(pname, data);                                                               }
	GetDoublev             :: inline proc "c" (pname: u32, data: ^f64)                                                                            {        impl_GetDoublev(pname, data);                                                                }
	GetError               :: inline proc "c" () -> u32                                                                                           { return impl_GetError();                                                                             }
	GetFloatv              :: inline proc "c" (pname: u32, data: ^f32)                                                                            {        impl_GetFloatv(pname, data);                                                                 }
	GetIntegerv            :: inline proc "c" (pname: u32, data: ^i32)                                                                            {        impl_GetIntegerv(pname, data);                                                               }
	GetString              :: inline proc "c" (name: u32) -> cstring                                                                              { return impl_GetString(name);                                                                        }
	GetTexImage            :: inline proc "c" (target: u32,  level: i32, format, type: u32, pixels: rawptr)                                       {        impl_GetTexImage(target,  level, format, type, pixels);                                      }
	GetTexParameterfv      :: inline proc "c" (target, pname: u32, params: ^f32)                                                                  {        impl_GetTexParameterfv(target, pname, params);                                               }
	GetTexParameteriv      :: inline proc "c" (target, pname: u32, params: ^i32)                                                                  {        impl_GetTexParameteriv(target, pname, params);                                               }
	GetTexLevelParameterfv :: inline proc "c" (target: u32, level: i32, pname: u32, params: ^f32)                                                 {        impl_GetTexLevelParameterfv(target, level, pname, params);                                   }
	GetTexLevelParameteriv :: inline proc "c" (target: u32, level: i32, pname: u32, params: ^i32)                                                 {        impl_GetTexLevelParameteriv(target, level, pname, params);                                   }
	IsEnabled              :: inline proc "c" (cap: u32) -> u8                                                                                    { return impl_IsEnabled(cap);                                                                         }
	DepthRange             :: inline proc "c" (near, far: f64)                                                                                    {        impl_DepthRange(near, far);                                                                  }
	Viewport               :: inline proc "c" (x, y, width, height: i32)                                                                          {        impl_Viewport(x, y, width, height);                                                          }

	// VERSION_1_1
	DrawArrays        :: inline proc "c" (mode: u32, first: i32, count: i32)                                                                                    {        impl_DrawArrays(mode, first, count);                                                      }
	DrawElements      :: inline proc "c" (mode: u32, count: i32, type: u32, indices: rawptr)                                                                    {        impl_DrawElements(mode, count, type, indices);                                            }
	PolygonOffset     :: inline proc "c" (factor: f32, units: f32)                                                                                              {        impl_PolygonOffset(factor, units);                                                        }
	CopyTexImage1D    :: inline proc "c" (target: u32, level: i32, internalformat: u32, x: i32, y: i32, width: i32, border: i32)                                {        impl_CopyTexImage1D(target, level, internalformat, x, y, width, border);                  }
	CopyTexImage2D    :: inline proc "c" (target: u32, level: i32, internalformat: u32, x: i32, y: i32, width: i32, height: i32, border: i32)                   {        impl_CopyTexImage2D(target, level, internalformat, x, y, width, height, border);          }
	CopyTexSubImage1D :: inline proc "c" (target: u32, level: i32, xoffset: i32, x: i32, y: i32, width: i32)                                                    {        impl_CopyTexSubImage1D(target, level, xoffset, x, y, width);                              }
	CopyTexSubImage2D :: inline proc "c" (target: u32, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32)                         {        impl_CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);             }
	TexSubImage1D     :: inline proc "c" (target: u32, level: i32, xoffset: i32, width: i32, format: u32, type: u32, pixels: rawptr)                            {        impl_TexSubImage1D(target, level, xoffset, width, format, type, pixels);                  }
	TexSubImage2D     :: inline proc "c" (target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, type: u32, pixels: rawptr) {        impl_TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); }
	BindTexture       :: inline proc "c" (target: u32, texture: u32)                                                                                            {        impl_BindTexture(target, texture);                                                        }
	DeleteTextures    :: inline proc "c" (n: i32, textures: ^u32)                                                                                               {        impl_DeleteTextures(n, textures);                                                         }
	GenTextures       :: inline proc "c" (n: i32, textures: ^u32)                                                                                               {        impl_GenTextures(n, textures);                                                            }
	IsTexture         :: inline proc "c" (texture: u32) -> u8                                                                                                   { return impl_IsTexture(texture);                                                                  }

	// VERSION_1_2
	DrawRangeElements :: inline proc "c" (mode, start, end: u32, count: i32, type: u32, indices: rawptr)                                               { impl_DrawRangeElements(mode, start, end, count, type, indices);                                           }
	TexImage3D        :: inline proc "c" (target: u32, level, internalformat, width, height, depth, border: i32, format, type: u32, pixels: rawptr)    { impl_TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);       }
	TexSubImage3D     :: inline proc "c" (target: u32, level, xoffset, yoffset, zoffset, width, height, depth: i32, format, type: u32, pixels: rawptr) { impl_TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
	CopyTexSubImage3D :: inline proc "c" (target: u32, level, xoffset, yoffset, zoffset, x, y, width, height: i32)                                     { impl_CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);                    }
}
